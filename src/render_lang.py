import iron_horse
import utils
from polar_fox import git_info

import shutil
import os

currentdir = os.curdir
from time import time

import sys

sys.path.append(os.path.join("src"))  # add to the module search path

import codecs  # used for writing files - more unicode friendly than standard open() module
import json

# chameleon used in most template cases
from chameleon import PageTemplateLoader

# setup the places we look for templates
templates = PageTemplateLoader(os.path.join(currentdir, "src", "templates"))

# get args passed by makefile
command_line_args = utils.get_command_line_args()


def main():
    print("[RENDER LANG]", " ".join(sys.argv))
    start = time()
    iron_horse.main()

    roster = iron_horse.roster_manager.active_roster
    # expect Exception failures if there is no active roster, don't bother explicitly handling that case

    lang_src = os.path.join(currentdir, "src", "lang", roster.id)
    lang_dst = os.path.join(
        iron_horse.generated_files_path, "lang", command_line_args.grf_name
    )

    if os.path.exists(lang_dst):
        shutil.rmtree(lang_dst)
    shutil.copytree(lang_src, lang_dst)
    # we don't want the default english lng file, we'll regenerate a new version later
    os.remove(os.path.join(lang_dst, "english_" + roster.id + ".lng"))
    hint_file = codecs.open(
        os.path.join(lang_dst, "_lang_files_here_are_generated.txt"), "w", "utf8"
    )
    hint_file.write(
        "Don't edit the lang files here.  They're generated by the build script. \n Edit the ones in lang_src instead."
    )
    hint_file.close()

    consists = roster.consists_in_buy_menu_order

    with open(os.path.join(currentdir, "src", "lang", "lang.json"), "r") as f:
        lang_src_data = json.load(f)
    lang_cabbage_lines = []

    for node_name, node_value in lang_src_data.items():
        if "_COMMENT" in node_name:
            lang_cabbage_lines.append(node_value)
        else:
            lang_cabbage_lines.append(node_name + ":" + node_value["base"])

    for consist in consists:
        if consist._name is not None:
            lang_cabbage_lines.append(
                "STR_NAME_" + consist.id.upper() + ":" + consist._name
            )

    languages_with_generation = ("english",)
    for i in languages_with_generation:
        # compile strings to single lang file - english
        lang_template = templates[i + ".pylng"]

        src_file = codecs.open(
            os.path.join(lang_src, i + "_" + roster.id + ".lng"), "r", "utf8"
        )
        dst_file = codecs.open(os.path.join(lang_dst, i + ".lng"), "w", "utf8")
        lang_content = src_file.read()  # !! LEGACY READ OF OLD FILE
        lang_content = utils.unescape_chameleon_output(
            lang_template(
                consists=consists,
                command_line_args=command_line_args,
                git_info=git_info,
                utils=utils,
                roster=roster,
                lang_cabbage_lines=lang_cabbage_lines,
            )
        )
        lines = lang_content.split("\n")
        stripped_lines = [line.lstrip() for line in lines]
        dst_file.write("\n".join(stripped_lines))
        dst_file.close()

    print(
        "[RENDER LANG]",
        command_line_args.grf_name,
        "- complete",
        format((time() - start), ".2f") + "s",
    )


if __name__ == "__main__":
    main()
