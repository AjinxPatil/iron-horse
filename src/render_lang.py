import iron_horse
import utils
from polar_fox import git_info

import shutil
import os

currentdir = os.curdir
from time import time

import sys

sys.path.append(os.path.join("src"))  # add to the module search path

import codecs  # used for writing files - more unicode friendly than standard open() module
import tomllib

# chameleon used in most template cases
from chameleon import PageTemplateLoader

# setup the places we look for templates
templates = PageTemplateLoader(os.path.join(currentdir, "src", "templates"))

# get args passed by makefile
command_line_args = utils.get_command_line_args()


def get_lang_data(lang, roster):
    global_pragma = {}
    lang_strings = {}
    with open(os.path.join(currentdir, "src", "lang", lang + ".toml"), "rb") as fp:
        lang_source = tomllib.load(fp)

    for node_name, node_value in lang_source.items():
        if node_name == "GLOBAL_PRAGMA":
            # explicit handling of global pragma items
            global_pragma["grflangid"] = node_value["grflangid"]
            global_pragma["plural"] = node_value["plural"]
            if node_value.get("gender", False):
                global_pragma["gender"] = node_value["gender"]
            if node_value.get("case", False):
                global_pragma["case"] = node_value["case"]
        else:
            # all lang strings should provide a default base value, which can optionally be over-ridden per roster
            # !! this should be handled by the roster method which fetches the lang src
            if roster.id in node_value.keys():
                lang_strings[node_name] = node_value[roster.id]
            else:
                lang_strings[node_name] = node_value["base"]

    for consist in roster.consists_in_buy_menu_order:
        if consist._name is not None:
            lang_strings["STR_NAME_" + consist.id.upper()] = consist._name

    return {"global_pragma": global_pragma, "lang_strings": lang_strings}


def main():
    print("[RENDER LANG]", " ".join(sys.argv))
    start = time()
    iron_horse.main()

    roster = iron_horse.roster_manager.active_roster
    # expect Exception failures if there is no active roster, don't bother explicitly handling that case

    lang_dst = os.path.join(
        iron_horse.generated_files_path, "lang", command_line_args.grf_name
    )
    if os.path.exists(lang_dst):
        shutil.rmtree(lang_dst)
    os.mkdir(lang_dst)

    hint_file = codecs.open(
        os.path.join(lang_dst, "_lang_files_here_are_generated.txt"), "w", "utf8"
    )
    hint_file.write(
        "Don't edit the lang files here.  They're generated by the build script. \n Edit the files in src/lang/ instead."
    )
    hint_file.close()

    lang_template = templates["lang_file.pylng"]
    # compile strings to single lang file as of August 2023 - english
    languages_with_generation = ("english",)
    for lang_name in languages_with_generation:
        lang_data = get_lang_data(lang_name, roster)
        # flatten the strings for rendering
        lang_strings_formatted_as_lng_lines = []
        longest_string_length = max(
            [len(key)] for key in lang_data["lang_strings"].keys()
        )[0]
        for string_name, string_value in lang_data["lang_strings"].items():
            # note that stupid pretty formatting of generated output is just to ease debugging string generation when needed, otherwise not essential
            separator = ":".rjust(longest_string_length - len(string_name) + 7)
            lang_strings_formatted_as_lng_lines.append(
                string_name + separator + string_value
            )

        lang_content = utils.unescape_chameleon_output(
            lang_template(
                command_line_args=command_line_args,
                git_info=git_info,
                utils=utils,
                roster=roster,
                lang_data=lang_data,
                lang_strings_formatted_as_lng_lines=lang_strings_formatted_as_lng_lines,
            )
        )
        # we clean up some templating artefacts just to produce more readable output for debugging when needed, otherwise not essential
        lines = lang_content.split("\n")
        stripped_lines = [line.lstrip() for line in lines]
        cleaned_lang_content = "\n".join(stripped_lines)
        # write the output eh
        dst_file = codecs.open(os.path.join(lang_dst, lang_name + ".lng"), "w", "utf8")
        dst_file.write(cleaned_lang_content)
        dst_file.close()

    print(
        "[RENDER LANG]",
        command_line_args.grf_name,
        "- complete",
        format((time() - start), ".2f") + "s",
    )


if __name__ == "__main__":
    main()
