# spritelayer cargos are sandboxed into their own module to avoid them spawning tentacles into gestalt graphics, global constants, train.py etc

# this is *specifically* cargos that look like vehicles (trucks etc to suit FIRS automotive chain) *not* general cargos to go on vehicles, confusing eh?

from gestalt_graphics.pipelines import GenerateCompositedVehiclesCargos
from gestalt_graphics.gestalt_graphics import GestaltGraphicsIntermodal

class VehiclesCargoGestalt(object):
    """ Sparse class to hold vehicles cargos gestalts """
    # a gestalt is a set of vehicles cargos (trucks etc.) of specific length and appearance
    # each set corresponds to a spritesheet which will be generated by the graphics processor
    # each set is used for a specific group of cargo labels
    # ====== #

    # !!!!!! are these up to date for vehicles - remove this when done !!!!!

    # each container set may have one or more spriterows
    # spriterows are chosen randomly when vehicles load new cargo
    # rows are composed by the graphics processor, and may include variations for
    # - combinations of container lengths
    # - combinations of container types
    # - container colours
    # !!! containers are going to need 'base sets' to allow double stack, cropped for well cars etc
    # !!! the consist needs to encode the set type to fetch the right spritesets
    # !!! base sets will also have to be encoded in gestalts here, unless they're done by (sets * gestalts) combinatorially?
    def __init__(self, container_subtype):
        self.pipeline = GenerateCompositedVehiclesCargos()
        self.container_subtype = container_subtype

    @property
    def floor_height_variants(self):
        # used to handle, e.g. low floor, narrow gauge etc by putting a yoffset in the generated container sprites
        # extend to accomodate double stack later (only one floor height probably)?
        # format is (label, yoffset for floor-height) - leave floor height as 0 for default floor heights
        if self.stack_type == 'single':
            return (('default', 0), ('low_floor', 1))
        else:
            # other values not implemented yet
            raise ValueError()

    @property
    def id(self):
        return "intermodal_" + self.container_subtype + "_" + str(self.length) + "px"


class IntermodalBox16px(VehiclesCargoGestalt):
    def __init__(self, container_subtype):
        super().__init__(container_subtype)
        self.length = 16
        self.stack_type = 'single'
        self.variants = [['box_30_foot_1CC'],
                         ['box_30_foot_2CC'],
                         ['box_30_foot_red']]


class IntermodalBox24px(VehiclesCargoGestalt):
    def __init__(self, container_subtype):
        super().__init__(container_subtype)
        self.length = 24
        self.stack_type = 'single'
        self.variants = [['box_20_foot_1CC', 'box_20_foot_1CC'],
                         ['box_20_foot_1CC', 'box_20_foot_red'],
                         ['box_20_foot_red', 'box_20_foot_1CC'],
                         ['box_40_foot_1CC'],
                         ['box_40_foot_2CC'],
                         ['box_40_foot_red']]


class IntermodalBox32px(VehiclesCargoGestalt):
    def __init__(self, container_subtype):
        super().__init__(container_subtype)
        self.length = 32
        self.stack_type = 'single'
        self.variants = [['box_20_foot_1CC', 'box_20_foot_1CC', 'box_20_foot_1CC'],
                         ['box_20_foot_1CC', 'box_20_foot_1CC', 'box_20_foot_red'],
                         ['box_20_foot_red', 'box_20_foot_red', 'box_20_foot_red'],
                         ['box_20_foot_2CC', 'box_20_foot_2CC', 'box_20_foot_2CC'],
                         ['box_20_foot_1CC', 'box_20_foot_1CC', 'box_20_foot_1CC'],
                         ['box_20_foot_1CC', 'box_40_foot_1CC'],
                         ['box_20_foot_2CC', 'box_40_foot_1CC'],
                         ['box_20_foot_red', 'box_40_foot_red'],
                         ['box_40_foot_1CC', 'box_20_foot_1CC'],
                         ['box_40_foot_2CC', 'box_20_foot_2CC'],
                         ['box_40_foot_2CC', 'box_20_foot_1CC'],
                         ['box_30_foot_1CC', 'box_30_foot_1CC']]


def get_container_gestalts_by_length(vehicle_length):
    result = []
    for container_gestalt in registered_container_gestalts:
        if container_gestalt.length == 4 * vehicle_length:
            result.append(container_gestalt)
    return result

registered_container_gestalts = []

container_type_gestalt_mapping = {'box': [IntermodalBox16px, IntermodalBox24px, IntermodalBox32px]}

def register_container_gestalt(container_type, container_subtype):
    for gestalt in container_type_gestalt_mapping[container_type]:
        registered_container_gestalts.append(gestalt(container_subtype))

def main():
    # yeah this is fiddly
    # we need to generate both cargo-specific sprites (visible cargo or specific recolour
    # and semi-generic fallback sprites, with specific type of container - tank, box, etc (and generic cargo and/or default recolour)
    """
    # first do the defaults, which will be named xxxxxx_DFLT
    for container_type in container_type_gestalt_mapping.keys():
        if container_type not in ['bulk']: # exclude some types which have no meaningful default (and will fall back to box)
            container_subtype = container_type + '_DFLT'
            register_container_gestalt(container_type, container_subtype)

    # then do the ones with cargo-specific graphics, e.g. bulk_COAL, tank_PETR etc
    for container_subtype in set(GestaltGraphicsIntermodal().cargo_label_mapping.values()):
        if 'DFLT' not in container_subtype: # exclude DFLT, handled explicitly elsewhere
            container_type = container_subtype[0:-5]
            register_container_gestalt(container_type, container_subtype)
    """

    """
    commented by design, this is just for debugging / project management
    # for knowing how many containers combinations we have in total
    total = 0
    for gestalt in registered_container_gestalts:
        total += len(gestalt.variants)
    print('total variants', total)
    """
