// default spriteset templates
<!--! 'reversed' is random reversal on construction, depending on vehicle random bits
      'flipped' is user flipping vehicle in depot
      don't conflate them :) -->
<tal:lengths repeat="vehicle_length [2, 3, 4, 5, 6, 7, 8]">
    <tal:user_flipped repeat="flipped [(False, 'unflipped'), (True, 'flipped')]">
        template spriteset_template_asymmetric_unreversed_${vehicle_length}_8_${flipped[1]}(y, ANIM_FLAG) {
                //[left_x, upper_y, width, height, offset_x, offset_y]
            <tal:sprite repeat="bounding_box global_constants.spritesheet_bounding_boxes_asymmetric_unreversed">
                [${bounding_box[0]}, y, ${bounding_box[1]}, ${bounding_box[2]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][0]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][1]}, ANIM_FLAG]
            </tal:sprite>
        }

        template spriteset_template_asymmetric_reversed_${vehicle_length}_8_${flipped[1]}(y, ANIM_FLAG) {
                //[left_x, upper_y, width, height, offset_x, offset_y]
            <tal:sprite repeat="bounding_box global_constants.spritesheet_bounding_boxes_asymmetric_reversed">
                [${bounding_box[0]}, y, ${bounding_box[1]}, ${bounding_box[2]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][0]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][1]}, ANIM_FLAG]
            </tal:sprite>
        }
        <!--! 8/8 sprites don't need adjusted offsets when flipped, so just provide 4 realsprites for 8/8 symmetric
              reduces total sprite count, grf file size and compile time
              non-8/8 sprites will need offsets adjusted if flipped, so have to provide all 8 angles -->
        <tal:symmetrical define="bb_slice slice(4,8) if vehicle_length == 8 else slice(0,8)">
            template spriteset_template_symmetric_unreversed_${vehicle_length}_8_${flipped[1]}(y, ANIM_FLAG) {
                    //[left_x, upper_y, width, height, offset_x, offset_y]
                <tal:sprite repeat="bounding_box global_constants.spritesheet_bounding_boxes_symmetric_unreversed[bb_slice]">
                    [${bounding_box[0]}, y, ${bounding_box[1]}, ${bounding_box[2]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][0]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][1]}, ANIM_FLAG]
                </tal:sprite>
            }

            <!--!
                template spriteset_template_symmetric_reversed is identical to spriteset_template_symmetric_reversed
                'symmetric unreversed' obvs. makes no sense in itself, but vehicle flip is used for silly livery hax
            -->
            template spriteset_template_symmetric_reversed_${vehicle_length}_8_${flipped[1]}(y, ANIM_FLAG) {
                    //[left_x, upper_y, width, height, offset_x, offset_y]
                <tal:sprite repeat="bounding_box global_constants.spritesheet_bounding_boxes_symmetric_reversed[bb_slice]">
                    [${bounding_box[0]}, y, ${bounding_box[1]}, ${bounding_box[2]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][0]}, ${utils.get_offsets(vehicle_length,flipped=flipped[0])[repeat.bounding_box.index][1]}, ANIM_FLAG]
                </tal:sprite>
            }
        </tal:symmetrical>
    </tal:user_flipped>
</tal:lengths>

<!--! reusable vehicle 'empty' spriteset -->
spriteset(ss_global_empty_vehicle, "src/graphics/spriterow_template.png") {
    spriteset_template_asymmetric_unreversed_8_8_unflipped(10, NOANIM)
}

// buy menu spriteset templates
template spriteset_template_purchase_default(x_loc, y_loc, width, x_offset, anim_flag) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    []
    []
    []
    []
    []
    []
    [x_loc, y_loc, width, 16, x_offset, -9, anim_flag | NOCROP]
    []
}
template spriteset_template_purchase_dual_headed(x_loc, y_loc, width, x_offset, anim_flag) {
    //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
    []
    []
    [104, y_loc, width, 16, 1 + x_offset, -9, anim_flag | NOCROP]
    []
    []
    []
    [x_loc, y_loc, width, 16, -2 + x_offset, -9, anim_flag | NOCROP]
    []
}

<!--! reusabel purchase 'empty' spriteset -->
spriteset(ss_global_empty_purchase, "src/graphics/spriterow_template.png") {
    spriteset_template_purchase_default(224, 10, 1, 0, NOANIM)
}

<!--!
// buy menu spriteset template
template spriteset_template_purchase_${vehicle.id}(y) {
    <tal:dual_head switch="consist.dual_headed">
        <tal:false case="False">
            //[left_x,  upper_y,    width,      height,     offset_x,      offset_y]
            []
            []
            []
            []
            []
            []
            // allow for buffers/couplings being 1px additional to the unit (they overlap in consists, but show in buy menu)
            [${consist.buy_menu_x_loc}, y, ${consist.buy_menu_width + 1}, 16, -${int(consist.buy_menu_width / 2)}, -11 ${', ANIM' if consist.suppress_animated_pixel_warnings else ''}]
            []
        </tal:false>
        <tal:true case="True">
            []
            []
            [104, y, ${consist.buy_menu_width + 1}, 16, 1 - ${int(consist.buy_menu_width / 2)}, -11 ${', ANIM' if consist.suppress_animated_pixel_warnings else ''}]
            []
            []
            []
            // allow for buffers/couplings being 1px additional to the unit (they overlap in consists, but show in buy menu)
            [${consist.buy_menu_x_loc}, y, ${consist.buy_menu_width + 1}, 16, -2 - ${int(consist.buy_menu_width / 2)}, -11 ${', ANIM' if consist.suppress_animated_pixel_warnings else ''}]
            []
        </tal:true>
    </tal:dual_head>

}

-->
