<tal:trailing_parts condition="vehicle.articulated==True">
// add the trailing parts to articulated consist
switch (FEAT_TRAINS, SELF, ${vehicle.id}_articulated_cb_switch, extra_callback_info1) {
    <tal:build_trailing_parts repeat="trailing_part vehicle.trailing_parts">
    ${repeat.trailing_part.number}: return ${trailing_part.id};
    </tal:build_trailing_parts>
  return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
</tal:trailing_parts>

// -- print some of the vehicle non-nml properties to aid debugging -- //
// [no properties printed]

item(FEAT_TRAINS, ${vehicle.id}, ${vehicle.numeric_id}) {
    property {
        name:                           ${vehicle.get_name()};
        climates_available:             ${vehicle.availability};
        engine_class:                   ${vehicle.engine_class};
        visual_effect_and_powered:      visual_effect(${vehicle.visual_effect}, ${vehicle.visual_effect_offset});
        dual_headed:                    ${vehicle.dual_headed};
        introduction_date:              date(${vehicle.intro_date},01,01); // vehicle just supplies intro year - openttd randomises intro dates a bit anyway
        cargo_capacity:                 ${vehicle.default_cargo_capacities[0]};
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          ${vehicle.power}hp;
        <tal:speed_is_optional condition="vehicle.speed is not None">
            speed:                          ${vehicle.speed}mph;
        </tal:speed_is_optional>
        weight:                         ${vehicle.weight}ton;
        tractive_effort_coefficient:    ${vehicle.tractive_effort_coefficient};
        cost_factor:                    ${vehicle.buy_cost};
        running_cost_factor:            ${vehicle.running_cost};
        refit_cost:                     0;
        refittable_cargo_classes:       bitmask(${vehicle.refittable_classes});
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [${vehicle.get_label_refits_allowed()}];
        cargo_disallow_refit:           [${vehicle.get_label_refits_disallowed()}];
        default_cargo_type:             ${vehicle.default_cargo};
        loading_speed:                  ${vehicle.loading_speed};
        misc_flags:                     bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_FLIP); // nml constants
        model_life:                     ${vehicle.adjusted_model_life};
        retire_early:                   ${vehicle.vehicle_life - 4}; // magic from Eddi
        reliability_decay:              20; // default value
        vehicle_life:                   ${vehicle.vehicle_life};
        length:                         ${vehicle.vehicle_length};
    }
    graphics {
        cargo_capacity:                 ${vehicle.id}_switch_cargo_capacity;
        purchase_cargo_capacity:        ${vehicle.id}_switch_purchase_cargo_capacity;
        additional_text:                ${vehicle.get_buy_menu_string()};
        refit_cost:                     ${vehicle.id}_switch_refit_cost;
        <tal:articulated condition="vehicle.articulated">
            articulated_part:               ${vehicle.id}_articulated_cb_switch;
        </tal:articulated>
        default:                        ${vehicle.id}_switch_graphics;
        purchase:                       ${vehicle.id}_sg_purchase;
    }
}

// -- end ${vehicle.title} -- <!--! another comment to aid reading the final nml  -->

