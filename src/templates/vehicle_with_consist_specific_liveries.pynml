<!--! liveries that change depending on the 'role' of the engine
      intended for pax and mail cars, possibly limited other types
      a few tricks:
      - flipping vehicle to swap randomised liveries
      - some specific cargos over-ride engine livery
      - loaded and empty state are same, but optional loading state (for opening doors at stations)
 -->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
// default graphics chain
<tal:consist_cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
    <tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
        spriteset(${vehicle.id}_ss_doors_closed_livery_1_${cargo_variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_${flipped}(10 + ${cargo_variant_num * 120})
        }
        spriteset(${vehicle.id}_ss_doors_open_livery_1_${cargo_variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_${flipped}(10 + ${cargo_variant_num * 120} + 30)
        }
        spriteset(${vehicle.id}_ss_doors_closed_livery_2_${cargo_variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_${flipped}(10 + ${cargo_variant_num * 120} + 60)
        }
        spriteset(${vehicle.id}_ss_doors_open_livery_2_${cargo_variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_${flipped}(10 + ${cargo_variant_num * 120} + 90)
        }

        spritegroup ${vehicle.id}_sg_livery_1_${cargo_variant_num}_${flipped} {
            loaded:  [
                ${vehicle.id}_ss_doors_closed_livery_1_${cargo_variant_num}_${flipped},
            ];
            loading: [
                ${vehicle.id}_ss_doors_open_livery_1_${cargo_variant_num}_${flipped},
            ];
        }
        spritegroup ${vehicle.id}_sg_livery_2_${cargo_variant_num}_${flipped} {
            loaded:  [
                ${vehicle.id}_ss_doors_closed_livery_2_${cargo_variant_num}_${flipped},
            ];
            loading: [
                ${vehicle.id}_ss_doors_open_livery_2_${cargo_variant_num}_${flipped},
            ];
        }
    </tal:user_flipped>
    // handle user flipped state
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_livery_1_${cargo_variant_num}, vehicle_is_flipped) {
        1: return ${vehicle.id}_sg_livery_2_${cargo_variant_num}_flipped;
        return ${vehicle.id}_sg_livery_1_${cargo_variant_num}_unflipped;
    }
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_livery_2_${cargo_variant_num}, vehicle_is_flipped) {
        1: return ${vehicle.id}_sg_livery_1_${cargo_variant_num}_flipped;
        return ${vehicle.id}_sg_livery_2_${cargo_variant_num}_unflipped;
    }
    switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_engine_id_${cargo_variant_num}, vehicle_type_id) {
        <!--! this doesn't check grfid currently - add later if needed -->
        <tal:livery_2_engine_ids repeat="engine_id consist.livery_2_engine_ids">
            ${engine_id}: return ${vehicle.id}_switch_graphics_livery_2_${cargo_variant_num};
        </tal:livery_2_engine_ids>
        return ${vehicle.id}_switch_graphics_livery_1_${cargo_variant_num};
    }
</tal:consist_cargo_variants>

<tal:position_in_consist repeat="cargo_row_map consist.gestalt_graphics.cargo_row_map.items()">
    <tal:vars define="cargo_label cargo_row_map[0];
                      variants consist.gestalt_graphics.get_variants_with_position_keys(cargo_row_map)">
        <!--! rulesets must comply with the position names in gestalt_graphics.consist_positions_ordered
              these could be extended or made arbitrary, but that's unwanted complexity -->
        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'pax_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_first_${cargo_label}, num_vehs_in_vehid_chain) {
                <!--! don't show 'first' if same id chain < 5 vehicles -->
                0..4: return ${vehicle.id}_switch_graphics_engine_id_${variants['default']};
                return ${vehicle.id}_switch_graphics_engine_id_${variants['first']};
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_${cargo_label}, position_in_vehid_chain) {
                0: return ${vehicle.id}_switch_graphics_position_first_${cargo_label};
                return ${vehicle.id}_switch_graphics_engine_id_${variants['default']};
            }
        </tal:position_ruleset>
        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == None">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_engine_id_${variants['default']};
            }
        </tal:position_ruleset>
    </tal:vars>
</tal:position_in_consist>

switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_unreversed, most_common_cargo_type) {
    <tal:cargos repeat="cargo_label consist.gestalt_graphics.cargo_row_map.keys()">
    <!--!  assume that we always want first entry from the cargo's list of spritegroup row nums
           this will be the spritegroup row num for the 'default' vehicle graphical variant -->
        <tal:exclude_default_cargo condition="cargo_label != 'DFLT'">
            ${cargo_label}: return ${vehicle.id}_switch_graphics_position_in_consist_${cargo_label};
        </tal:exclude_default_cargo>
    </tal:cargos>
    return ${vehicle.id}_switch_graphics_position_in_consist_DFLT;
}



<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_sg_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

