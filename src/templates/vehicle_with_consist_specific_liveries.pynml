<!--! liveries that change depending on the 'role' of the engine
      intended for pax and mail cars, possibly limited other types
      a few tricks:
      - flipping vehicle to swap randomised liveries
      - some specific cargos over-ride engine livery
      - loaded and empty state are same, but optional loading state (for opening doors at stations)
 -->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
// default graphics chain
<tal:user_flipped repeat="flipped [('unflipped', 0), ('flipped', 1)]">
    spriteset(${vehicle.id}_ss_doors_closed_${flipped[0]}, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_${flipped[0]}(10 + ${flipped[1] * 60})
    }
    spriteset(${vehicle.id}_ss_doors_open_${flipped[0]}, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_${flipped[0]}(10 + ${flipped[1] * 60} + 30)
    }

    spritegroup ${vehicle.id}_sg_${flipped[0]} {
        loaded:  [
            ${vehicle.id}_ss_doors_closed_${flipped[0]},
        ];
        loading: [
            ${vehicle.id}_ss_doors_open_${flipped[0]},
        ];
    }
</tal:user_flipped>
// handle user flipped state
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_unreversed, vehicle_is_flipped) {
    1: return ${vehicle.id}_sg_flipped;
    return ${vehicle.id}_sg_unflipped;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_sg_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

