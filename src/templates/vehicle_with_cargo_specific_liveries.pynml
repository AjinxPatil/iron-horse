<!--!
    liveries mapped to cargos, but no support here for load states, just one sprite per cargo
    e.g. tank cars with black for oil, cc for chemicals, grey for petrol etc.
-->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<tal:sprites_random_variations repeat="variation_num python:range(consist.get_num_spritesets())">
    <tal:cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
        spriteset(${vehicle.id}_ss_${variation_num}_${cargo_variant_num}, "${global_constants.graphics_path}${consist.id}_${variation_num}.png") {
          spriteset_template_${vehicle.id}(10 + ${cargo_variant_num * 30})
        }

        spritegroup ${vehicle.id}_sg_${variation_num}_${cargo_variant_num} {
            loaded:  [
                ${vehicle.id}_ss_${variation_num}_${cargo_variant_num},
            ];
            loading: [
                ${vehicle.id}_ss_${variation_num}_${cargo_variant_num},
            ];
        }
    </tal:cargo_variants>

    <!--! this triggers random on a new load, which was designed for use specifically with containers where colours are randomised on load
          it's not necessary for e.g. tankers, which only have one livery option per cargo -->
    <tal:cargo_random_switches repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
        random_switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${variation_num}_${mapping[0]}, bitmask(TRIGGER_VEHICLE_NEW_LOAD)) {
            <tal:random_graphics_variations repeat="spriterow_num mapping[1]">
                1: return ${vehicle.id}_sg_${variation_num}_${spriterow_num};
            </tal:random_graphics_variations>
        }
    </tal:cargo_random_switches>

    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${variation_num}, cargo_type_in_veh) {
        <tal:cargos repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
            <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
                ${mapping[0]}: return ${vehicle.id}_switch_graphics_${variation_num}_${mapping[0]};
            </tal:exclude_default_cargo>
        </tal:cargos>
        <tal:default_cargo repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
            <tal:block condition="mapping[0] == 'DFLT'">
                return ${vehicle.id}_switch_graphics_${variation_num}_${mapping[0]};
            </tal:block>
        </tal:default_cargo>
    }
</tal:sprites_random_variations>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics
<tal:cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
    spriteset(${vehicle.id}_ss_purchase_${cargo_variant_num}, "${global_constants.graphics_path}${consist.id}_0.png") {
      spriteset_template_purchase_${vehicle.id}(10 + ${cargo_variant_num * 30})
    }

    spritegroup ${vehicle.id}_sg_purchase_${cargo_variant_num} {
        loaded:  [
            ${vehicle.id}_ss_purchase_${cargo_variant_num},
        ];
        loading: [
            ${vehicle.id}_ss_purchase_${cargo_variant_num},
        ];
    }
</tal:cargo_variants>

// purchase sprites always go through a switch in case the template does anything specific for purchase graphics
// if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, cargo_type_in_veh) {
    <tal:cargos repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
        <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
            ${mapping[0]}: return ${vehicle.id}_sg_purchase_${mapping[1][0]};
        </tal:exclude_default_cargo>
    </tal:cargos>
    <tal:default_cargo repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
        <tal:block condition="mapping[0] == 'DFLT'">
            return ${vehicle.id}_sg_purchase_${mapping[1][0]};
        </tal:block>
    </tal:default_cargo>
}

<tal:include metal:use-macro="load: capacity_switches.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />
