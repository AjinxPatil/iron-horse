/*
 * *********************
 * Define railtype table
 * *********************
 */

 railtypetable {
 	RAIL,
 	ELRL,
 	MGLV,
 	METRO: [MTRO, "3RDR", ELRL],
 	NG: [NAAN, NGRL, NLOW, NAAE, NBAN, ENLW, ENHI, ELNG],
 	ELNG: [NAAE, ENLW, ENHI, ELNG]
 }


//initialize parameters
param_customsignals = 1;
param_gui = 0;
param_levelcrossings = 0;
param_railtype_activated = 0;
param_railtype_disabled = 0;


// railtype spriteset templates

template template_gui(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //BUTTONS
    //rail
    [x    , y   , 20, 20,   0,   0]
    [x+ 21, y   , 20, 20,   0,   0]
    [x+ 42, y   , 20, 20,   0,   0]
    [x+ 63, y   , 20, 20,   0,   0]
    //autorail
    [x    , y+70, 20, 20,   0,   0]
    //depot
    [x+224, y+70, 20, 20,   0,   0]
    //tunnel
    [x+480, y   , 20, 20,   0,   0]
    //convert rail
    [x+144, y+70, 20, 20,   0,   0]
    //CURSORS
    //rail
    [x+160, y   , 38, 40, -4 ,  -9]
    [x+208, y   , 72, 44, -17,  -9]
    [x+288, y   , 44, 34, -14,  -3]
    [x+352, y   , 40, 41, -15, -10]
    //autorail
    [x+ 80, y+70, 56, 36,   0,   0]
    //depot
    [x+256, y+70, 32, 32,   0,   0]
    //tunnel
    [x+560, y   , 32, 32,   0,   0]
    //convert rail
    [x+176, y+70, 32,  32,  0,   0]
}
template template_gui_ttd(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //BUTTONS
    //rail
    [x    , y   , 20, 16,   0,   2]
    [x+ 26, y   , 20, 16,   0,   2]
    [x+ 58, y   , 20, 16,   0,   2]
    [x+ 90, y   , 20, 16,   0,   2]
    //autorail
    [x    , y+70, 20, 20,   0,   0]
    //depot
    [x+224, y+70, 20, 20,   0,   0]
    //tunnel
    [x+480, y   , 20, 19,   0,   1]
    //convert rail
    [x+144, y+70, 20, 20,   0,   0]
    //CURSORS
    //rail
    [x+160, y   , 38, 30,  -3, -14]
    [x+208, y   , 72, 44, -16,  -8]
    [x+288, y   , 44, 34, -21,  -2]
    [x+352, y   , 72, 44, -16, -35]
    //autorail
    [x+ 80, y+70, 56, 36,   0,   0]
    //depot
    [x+256, y+70, 32, 32,   0,   0]
    //tunnel
    [x+560, y   , 32, 32,   0,   0]
    //convert rail
    [x+176, y+70, 32, 32,   0,   0]
}

template template_track_overlay(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //flat
    [x    , y    , 42, 25, -21,  1]
    [x+ 80, y    , 42, 25, -19,  1]
    [x+160, y    , 40, 12, -19,  0]
    [x+240, y    , 40,  7, -19, 20]
    [x+320, y    , 15, 19,  11,  6]
    [x+400, y    , 15, 19, -24,  6]
    //slope y
    [x    , y+150, 64, 39, -31, -8]
    [x+ 80, y+150, 64, 23, -31,  0]
    [x+160, y+150, 64, 23, -31,  0]
    [x+240, y+150, 64, 39, -31, -8]
}

template template_underlay(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //6 flat
   [x    , y    , 64, 31, -31,  0]
   [x+ 80, y    , 64, 31, -31,  0]
   [x+160, y    , 64, 31, -31,  0]
   [x+240, y    , 64, 31, -31,  0]
   [x+320, y    , 64, 31, -31,  0]
   [x+400, y    , 64, 31, -31,  0]
    //4 slope
   [x    , y+170, 64, 39, -31, -8]
   [x+ 80, y+170, 64, 23, -31,  0]
   [x+160, y+170, 64, 23, -31,  0]
   [x+240, y+170, 64, 39, -31, -8]
    //1 X crossing piece
   [x+480, y    , 64, 31, -31,  0]
    //5 junction pieces
   [x    , y+ 50, 64, 31, -31,  0]
   [x+ 80, y+ 50, 64, 31, -31,  0]
   [x+160, y+ 50, 64, 31, -31,  0]
   [x+240, y+ 50, 64, 31, -31,  0]
   [x+320, y+ 50, 64, 31, -31,  0]
}

template template_tunnels(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //front SW
    [x    , y   , 64, 39, -31, -8]
    //back NW
    [x+160, y   , 64, 23, -31,  0]
    //back NE
    [x    , y+70, 64, 23, -31,  0]
    //front SE
    [x+160, y+70, 64, 39, -31, -8]
}

template template_bridge_surfaces(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //flat
    [x    , y, 64, 31, -31,  0]
    [x+ 80, y, 64, 31, -31,  0]
    //slopes
    [x+160, y, 64, 39, -31, -8]
    [x+240, y, 64, 23, -31,  0]
    [x+320, y, 64, 23, -31,  0]
    [x+400, y, 64, 39, -31, -8]
}

template template_bridge_level_crossings_track(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //rail overlay (X, Y)
    [x   , y, 64, 31, -31, 0]
    [x+80, y, 64, 31, -31, 0]
}

template template_bridge_level_crossings_light(x,y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //lights (north, east, west, south; X, Y)
    [x   , y    , 64, 31, -31,   0]
    [x+80, y    , 64, 31, -31,   0]
    [x   , y+ 50, 64, 31, -57, -13]
    [x+80, y+ 50, 64, 31, -57, -13]
    [x   , y+100, 64, 31,  -5, -13]
    [x+80, y+100, 64, 31,  -5, -13]
    [x   , y+150, 64, 31, -31, -26]
    [x+80, y+150, 64, 31, -31, -26]
}

template template_catenary_wire(x, y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    [x     , y, 64, 37, -45,  -5] //flat
    [x+  80, y, 64, 37, -17,  -5] //flat
    [x+ 240, y, 64, 32, -17, -13] //flat
    [x+ 160, y, 64, 31, -31,  -6] //flat
    [x+ 560, y, 64, 44, -45,  -6] //slope ne
    [x+ 400, y, 64, 30, -17,   4] //slope se
    [x+ 320, y, 64, 30, -45,   4] //slope sw
    [x+ 480, y, 64, 44, -17,  -6] //slope nw
    [x     , y, 64, 37, -45,  -5] //flat
    [x+  80, y, 64, 37, -17,  -5] //flat
    [x+ 240, y, 64, 32, -17, -13] //flat
    [x+ 160, y, 64, 31, -31,  -6] //flat
    [x+ 560, y, 64, 44, -45,  -6] //slope ne
    [x+ 400, y, 64, 30, -17,   4] //slope se
    [x+ 320, y, 64, 30, -45,   4] //slope sw
    [x+ 480, y, 64, 44, -17,  -6] //slope nw
    [x     , y, 64, 37, -45,  -5] //flat
    [x+  80, y, 64, 37, -17,  -5] //flat
    [x+ 240, y, 64, 32, -17, -13] //flat
    [x+ 160, y, 64, 31, -31,  -6] //flat
    [x+ 560, y, 64, 44, -45,  -6] //slope ne
    [x+ 400, y, 64, 30, -17,   4] //slope se
    [x+ 320, y, 64, 30, -45,   4] //slope sw
    [x+ 480, y, 64, 44, -17,  -6] //slope nw
    [x     , y,  1,  1,   0,   0] //tunnel (blank)
    [x     , y,  1,  1,   0,   0] //tunnel (blank)
    [x     , y,  1,  1,   0,   0] //tunnel (blank)
    [x     , y,  1,  1,   0,   0] //tunnel (blank)
}

template template_catenary_pylons(x, y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    [x, y,  1, 1, 0, 0] //(blank)
    [x, y,  1, 1, 0, 0] //(blank)
    [x, y,  1, 1, 0, 0] //(blank)
    [x, y,  1, 1, 0, 0] //(blank)
    [x, y,  1, 1, 0, 0] //(blank)
    [x, y,  1, 1, 0, 0] //(blank)
    [x, y,  1, 1, 0, 0] //(blank)
    [x, y,  1, 1, 0, 0] //(blank)
}

template template_tunnel_overlay(x, y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    //front SW
    [x     , y, 64, 37, -31, -38] //flat
    //back NW
    [x+  80, y, 64, 37, -31, -38] //flat
    //back NE
    [x+ 160, y, 64, 37, -31, -38] //flat
    //front SE
    [x+ 240, y, 64, 37, -31, -38] //flat
}

template template_depots(x, y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    [x    , y, 18, 18,  13,  -1]
    [x+ 80, y, 58, 51,  -5, -37]
    [x+160, y, 18, 18, -29,  -1]
    [x+240, y, 58, 51, -51, -37]
    [x+320, y, 58, 51, -51, -37]
    [x+400, y, 58, 51,  -5, -37]
}

template template_signals(x, y) {
    //[x+left_x, upper_y, width, height, offset_x, offset_y]
    [x    , y, 20, 30, -10, -30] //sw
    [x+ 30, y, 20, 30, -10, -30] //ne
    [x+ 60, y, 20, 30, -10, -30] //nw
    [x+ 90, y, 20, 30, -10, -30] //se
    [x+120, y, 20, 30, -10, -30] //e
    [x+150, y, 20, 30, -10, -30] //w
    [x+180, y, 20, 30, -10, -28] //s
    [x+210, y, 20, 30, -10, -28] //n
}


// Signals

spriteset (spriteset_signals_block_green, "${graphics_path}/railtypes/signals/signals_block.png") {
    template_signals(0,0)
}
spriteset (spriteset_signals_block_red, "${graphics_path}/railtypes/signals/signals_block.png") {
    template_signals(0,40)
}
spriteset (spriteset_signals_block_combo_green, "${graphics_path}/railtypes/signals/signals_block_combo.png") {
    template_signals(0,0)
}
spriteset (spriteset_signals_block_combo_red, "${graphics_path}/railtypes/signals/signals_block_combo.png") {
    template_signals(0,40)
}
spriteset (spriteset_signals_block_entry_green, "${graphics_path}/railtypes/signals/signals_block_entry.png") {
    template_signals(0,0)
}
spriteset (spriteset_signals_block_entry_red, "${graphics_path}/railtypes/signals/signals_block_entry.png") {
    template_signals(0,40)
}
spriteset (spriteset_signals_block_exit_green, "${graphics_path}/railtypes/signals/signals_block_exit.png") {
    template_signals(0,0)
}
spriteset (spriteset_signals_block_exit_red, "${graphics_path}/railtypes/signals/signals_block_exit.png") {
    template_signals(0,40)
}
spriteset (spriteset_signals_path_oneway_green, "${graphics_path}/railtypes/signals/signals_path_oneway.png") {
    template_signals(0,0)
}
spriteset (spriteset_signals_path_oneway_red, "${graphics_path}/railtypes/signals/signals_path_oneway.png") {
    template_signals(0,40)
}
spriteset (spriteset_signals_path_twoway_green, "${graphics_path}/railtypes/signals/signals_path_twoway.png") {
    template_signals(0,0)
}
spriteset (spriteset_signals_path_twoway_red, "${graphics_path}/railtypes/signals/signals_path_twoway.png") {
    template_signals(0,40)
}

switch (FEAT_RAILTYPES, SELF, switch_signals_type, extra_callback_info2 & 0x00FFFFFF) {
    //light signals
    //TT         VV        SS
    (0 << 16) | (0 << 8) | 0 : spriteset_signals_block_red;
    (0 << 16) | (0 << 8) | 1 : spriteset_signals_block_green;
    (1 << 16) | (0 << 8) | 0 : spriteset_signals_block_entry_red;
    (1 << 16) | (0 << 8) | 1 : spriteset_signals_block_entry_green;
    (2 << 16) | (0 << 8) | 0 : spriteset_signals_block_exit_red;
    (2 << 16) | (0 << 8) | 1 : spriteset_signals_block_exit_green;
    (3 << 16) | (0 << 8) | 0 : spriteset_signals_block_combo_red;
    (3 << 16) | (0 << 8) | 1 : spriteset_signals_block_combo_green;
    (4 << 16) | (0 << 8) | 0 : spriteset_signals_path_twoway_red;
    (4 << 16) | (0 << 8) | 1 : spriteset_signals_path_twoway_green;
    (5 << 16) | (0 << 8) | 0 : spriteset_signals_path_oneway_red;
    (5 << 16) | (0 << 8) | 1 : spriteset_signals_path_oneway_green;
    //sempahores are not defined, will use standard signals
    CB_FAILED;
}

switch (FEAT_RAILTYPES, SELF, switch_signals, param_customsignals) {
    1: switch_signals_type; //only custom signals when parameter set
    CB_FAILED;
}


// Metro

spriteset (spriteset_metro_gui_opengfx, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_gui(10,760)
}
spriteset (spriteset_metro_gui_ttd, "${graphics_path}/railtypes/ttd_railtypes.png") {
    template_gui_ttd(10,760)
}
switch (FEAT_RAILTYPES, SELF, switch_metro_gui, param_gui) {
    1: spriteset_metro_gui_ttd;
    spriteset_metro_gui_opengfx;
}

spriteset (spriteset_metro_track_overlay_opengfx, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_track_overlay(10,20)
}
/* spriteset (spriteset_metro_track_overlay_ttd, "${graphics_path}/railtypes/ttd_railtypes.png") {
    template_track_overlay(10,20)
}
switch (FEAT_RAILTYPES, SELF, switch_track_overlay_param_gui, param_gui) {
    1                       :spriteset_metro_track_overlay_ttd;
    spriteset_metro_track_overlay_opengfx;
}*/

spriteset (spriteset_metro_underlay_opengfx, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_underlay(10,60)
}
/* spriteset (spriteset_metro_underlay_ttd, "${graphics_path}/railtypes/ttd_railtypes.png") {
    template_underlay(10,60)
}
switch (FEAT_RAILTYPES, SELF, switch_underlay_param_gui, param_gui) {
    1                       :spriteset_metro_underlay_ttd;
    spriteset_metro_underlay_opengfx;
} */

spriteset (spriteset_metro_tunnels_opengfx, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_tunnels(330,460)
}
/* spriteset (spriteset_metro_tunnels_ttd, "${graphics_path}/railtypes/ttd_railtypes.png") {
    template_tunnels(330,460)
}
switch (FEAT_RAILTYPES, SELF, switch_tunnels_param_gui, param_gui) {
    1                       :spriteset_metro_tunnels_ttd;
    spriteset_metro_tunnels_opengfx;
} */

spriteset (spriteset_metro_bridge_surfaces_opengfx, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_bridge_surfaces(10,300)
}
/* spriteset (spriteset_metro_bridge_surfaces_ttd, "${graphics_path}/railtypes/ttd_railtypes.png") {
    template_bridge_surfaces(10,300)
}
switch (FEAT_RAILTYPES, SELF, switch_bridge_surfaces_param_gui, param_gui) {
    1                       :spriteset_metro_bridge_surfaces_ttd;
    spriteset_metro_bridge_surfaces_opengfx;
} */

spriteset (spriteset_metro_level_crossings_opengfx_open, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(10,430)
}
spriteset (spriteset_metro_level_crossings_opengfx_closed, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(170,430)
}
switch (FEAT_RAILTYPES, SELF, switch_metro_level_crossings_opengfx, level_crossing_status) {
    LEVEL_CROSSING_CLOSED: spriteset_metro_level_crossings_opengfx_closed;
    spriteset_metro_level_crossings_opengfx_open;
}
/* spriteset (spriteset_metro_level_crossings_ttd_open, "${graphics_path}/railtypes/ttd_railtypes.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(10,430)
}
spriteset (spriteset_metro_level_crossings_ttd_closed, "${graphics_path}/railtypes/ttd_railtypes.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(170,430)
}
switch (FEAT_RAILTYPES, SELF, switch_metro_level_crossings_ttd, level_crossing_status) {
    LEVEL_CROSSING_CLOSED: spriteset_metro_level_crossings_ttd_closed;
    spriteset_metro_level_crossings_ttd_open;
}
switch (FEAT_RAILTYPES, SELF, switch_level_crossings_param_gui, param_gui) {
    1                       :switch_metro_level_crossings_ttd;
    switch_metro_level_crossings_opengfx;
} */

spriteset (spriteset_metro_depot, "${graphics_path}/railtypes/ogfx_railtypes.png") {
    template_depots(10,890)
}

if (railtype_available("SAA3") || (loading_stage == LOADING_STAGE_RESERVE)) {
	//count number of activated railtypes
	param_railtype_activated = param_railtype_activated + 1;
	item (FEAT_RAILTYPES, item_metro) {
		property {
			label:                          "SAA3";
			name:                           string(str_metrotrack_name);
			menu_text:                      string(str_metrotrack_menu_text);
			build_window_caption:           string(str_metrotrack_build_window_caption);
			autoreplace_text:               string(str_metrotrack_autoreplace_text);
			new_engine_text:                string(str_metrotrack_new_engine_text);
			//railtype_flags:               bitmask();
			curve_speed_multiplier:         1;
			station_graphics:               RAILTYPE_STATION_NORMAL;
			speed_limit:                    0;
			acceleration_model:             ACC_MODEL_RAIL;
			//set compatible and powered
			compatible_railtype_list:       ["RAIL", "ELRL",
												 "SAAN", "SABN", "SACN", "SADN", "SAEN",
												 "SAAE", "SABE", "SACE", "SADE", "SAEE",
												 "SAAD", "SABD", "SACD", "SADD", "SAED",
												 "SAAd", "SABd", "SACd", "SADd", "SAEd",
												 "SAAA", "SABA", "SACA", "SADA", "SAEA",
												 "SAAa", "SABa", "SACa", "SADa", "SAEa",
												 "SAAZ", "SSAZ", "SUAZ"];
			powered_railtype_list:          ["SAAZ", "SSAZ", "SUAZ"];
			construction_cost:          10;
			map_colour:                 0x25;
			toolbar_caption:            string(str_metrotrack_toolbar_caption);
			maintenance_cost:           10;
			alternative_railtype_list:  ["3RDR", "MTRO",
										 "SAA3", "SAB3", "SAC3", "SAD3", "SAE3"];
		}
		//disallow level crossings
		if (param_levelcrossings == 0) {
			property {
				railtype_flags:             bitmask(RAILTYPE_FLAG_NO_LEVEL_CROSSING);
			}
		}
		graphics {
			gui:                        switch_metro_gui;
			track_overlay:              spriteset_metro_track_overlay_opengfx;
			underlay:                   spriteset_metro_underlay_opengfx;
			tunnels:                    spriteset_metro_tunnels_opengfx;
			//catenary_wire:
			//catenary_pylons
			bridge_surfaces:            spriteset_metro_bridge_surfaces_opengfx;
			level_crossings:            switch_metro_level_crossings_opengfx;
			depots:						spriteset_metro_depot;
			//fences:
			//tunnel_overlay:
			signals:                    switch_signals;
		}
	}
}
else {
	//count number of disabled railtypes
	param_railtype_disabled = param_railtype_disabled + 1;
}


// Narrow gauge

spriteset (spriteset_narrowgauge_gui_opengfx, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_gui(10,760)
}
spriteset (spriteset_narrowgauge_gui_ttd, "${graphics_path}/railtypes/ngrail_ttd.png") {
    template_gui_ttd(10,760)
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_gui, param_gui) {
    1: spriteset_narrowgauge_gui_ttd;
    spriteset_narrowgauge_gui_opengfx;
}

spriteset (spriteset_narrowgauge_track_overlay_opengfx, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_track_overlay(10,20)
}
/* spriteset (spriteset_narrowgauge_track_overlay_ttd, "${graphics_path}/railtypes/ngrail_ttd.png") {
    template_track_overlay(10,20)
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_track_overlay_param_gui, param_gui) {
    1                       :spriteset_narrowgauge_track_overlay_ttd;
    spriteset_narrowgauge_track_overlay_opengfx;
} */

spriteset (spriteset_narrowgauge_underlay_opengfx, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_underlay(10,60)
}
/* spriteset (spriteset_narrowgauge_underlay_ttd, "${graphics_path}/railtypes/ngrail_ttd.png") {
    template_underlay(10,60)
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_underlay_param_gui, param_gui) {
    1                       :spriteset_narrowgauge_underlay_ttd;
    spriteset_narrowgauge_underlay_opengfx;
} */

spriteset (spriteset_narrowgauge_tunnels_opengfx, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_tunnels(330,460)
}
/* spriteset (spriteset_narrowgauge_tunnels_ttd, "${graphics_path}/railtypes/ngrail_ttd.png") {
    template_tunnels(330,460)
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_tunnels_param_gui, param_gui) {
    1                       :spriteset_narrowgauge_tunnels_ttd;
    spriteset_narrowgauge_tunnels_opengfx;
} */

spriteset (spriteset_narrowgauge_bridge_surfaces_opengfx, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_bridge_surfaces(10,300)
}
/* spriteset (spriteset_narrowgauge_bridge_surfaces_ttd, "${graphics_path}/railtypes/ngrail_ttd.png") {
    template_bridge_surfaces(10,300)
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_bridge_surfaces_param_gui, param_gui) {
    1                       :spriteset_narrowgauge_bridge_surfaces_ttd;
    spriteset_narrowgauge_bridge_surfaces_opengfx;
} */

spriteset (spriteset_narrowgauge_level_crossings_opengfx_open, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(10,430)
}
spriteset (spriteset_narrowgauge_level_crossings_opengfx_closed, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(170,430)
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_level_crossings_opengfx, level_crossing_status) {
    LEVEL_CROSSING_CLOSED: spriteset_narrowgauge_level_crossings_opengfx_closed;
    spriteset_narrowgauge_level_crossings_opengfx_open;
}
/* spriteset (spriteset_narrowgauge_level_crossings_ttd_open, "${graphics_path}/railtypes/ngrail_ttd.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(10,430)
}
spriteset (spriteset_narrowgauge_level_crossings_ttd_closed, "${graphics_path}/railtypes/ngrail_ttd.png") {
    template_bridge_level_crossings_track(10,630)
    template_bridge_level_crossings_light(170,430)
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_level_crossings_ttd, level_crossing_status) {
    LEVEL_CROSSING_CLOSED: spriteset_narrowgauge_level_crossings_ttd_closed;
    spriteset_narrowgauge_level_crossings_ttd_open;
}
switch (FEAT_RAILTYPES, SELF, switch_narrowgauge_level_crossings_param_gui, param_gui) {
    1                       :switch_narrowgauge_level_crossings_ttd;
    switch_narrowgauge_level_crossings_opengfx;
} */

spriteset (spriteset_narrowgauge_depot, "${graphics_path}/railtypes/ngrail_opengfx.png") {
    template_depots(10,890)
}

if (railtype_available("NAAN") || (loading_stage == LOADING_STAGE_RESERVE)) {
	//count number of activated railtypes
	param_railtype_activated = param_railtype_activated + 1;
	item (FEAT_RAILTYPES, item_narrowgauge) {
		property {
			label:                          "NAAN";
			name:                           string(str_narrowgauge_name);
			menu_text:                      string(str_narrowgauge_menu_text);
			build_window_caption:           string(str_narrowgauge_build_window_caption);
			autoreplace_text:               string(str_narrowgauge_autoreplace_text);
			new_engine_text:                string(str_narrowgauge_new_engine_text);
			//railtype_flags:               bitmask();
			curve_speed_multiplier:         1;
			station_graphics:               RAILTYPE_STATION_NORMAL;
			speed_limit:                    0;
			acceleration_model:             ACC_MODEL_RAIL;
			//set compatible and powered
			compatible_railtype_list:       ["NABN", "NACN", "NADN", "NAEN",
                                             "NAAE", "NABE", "NACE", "NADE", "NAEE"];
			powered_railtype_list:          ["NABN", "NACN", "NADN", "NAEN",
                                             "NAAE", "NABE", "NACE", "NADE", "NAEE"];
			construction_cost:          5;
			map_colour:                 0x25;
			toolbar_caption:            string(str_narrowgauge_toolbar_caption);
			maintenance_cost:           7;
			alternative_railtype_list:  ["NABN", "NACN", "NADN", "NAEN"];
		}
		graphics {
			gui:                        switch_narrowgauge_gui;
			track_overlay:              spriteset_narrowgauge_track_overlay_opengfx;
			underlay:                   spriteset_narrowgauge_underlay_opengfx;
			tunnels:                    spriteset_narrowgauge_tunnels_opengfx;
			//catenary_wire:
			//catenary_pylons
			bridge_surfaces:            spriteset_narrowgauge_bridge_surfaces_opengfx;
			level_crossings:            switch_narrowgauge_level_crossings_opengfx;
			depots:						spriteset_narrowgauge_depot;
			//fences:
			//tunnel_overlay:
			//signals:
		}
	}
}
else {
	//count number of disabled railtypes
	param_railtype_disabled = param_railtype_disabled + 1;
}

