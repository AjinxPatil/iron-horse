<!--! cargo_sprinter is full of special cases, lots of yak-shaving to get it done
  specifically here it has magic for showing or hiding cabs depending on consist -->

<tal:include metal:use-macro="load: offsets_standard.pynml" />

<tal:sprites_random_variations repeat="variation_num python:range(consist.get_num_spritesets())">
    <tal:cargo_colour_variant repeat="cargo_variant_num python:range(3)">
        <!--! Cabs: A = front, B = middle (no cab), C = rear -->
        <tal:cab_variants repeat="cab_variant python:range(3)">
            spriteset(${vehicle.id}_ss_empty_${variation_num}_${cargo_variant_num}_${cab_variant}, "${global_constants.graphics_path}${consist.id}_${variation_num}.png") {
                spriteset_template_${vehicle.id}(10 + ${cargo_variant_num * 270} + ${cab_variant * 90})
            }
            spriteset(${vehicle.id}_ss_loaded_box_${variation_num}_${cargo_variant_num}_${cab_variant}, "${global_constants.graphics_path}${consist.id}_${variation_num}.png") {
                spriteset_template_${vehicle.id}(40 + ${cargo_variant_num * 270} + ${cab_variant * 90})
            }
            spriteset(${vehicle.id}_ss_loaded_liquids_${variation_num}_${cargo_variant_num}_${cab_variant}, "${global_constants.graphics_path}${consist.id}_${variation_num}.png") {
                spriteset_template_${vehicle.id}(70 + ${cargo_variant_num * 270} + ${cab_variant * 90})
            }

            spritegroup ${vehicle.id}_sg_empty_${variation_num}_${cargo_variant_num}_${cab_variant} {
                loaded:  [
                    ${vehicle.id}_ss_empty_${variation_num}_${cargo_variant_num}_${cab_variant},
                ];
                loading: [
                    ${vehicle.id}_ss_empty_${variation_num}_${cargo_variant_num}_${cab_variant},
                ];
            }
            spritegroup ${vehicle.id}_sg_loaded_box_${variation_num}_${cargo_variant_num}_${cab_variant} {
                loaded:  [
                    ${vehicle.id}_ss_loaded_box_${variation_num}_${cargo_variant_num}_${cab_variant},
                ];
                loading: [
                    ${vehicle.id}_ss_loaded_box_${variation_num}_${cargo_variant_num}_${cab_variant},
                ];
            }
            spritegroup ${vehicle.id}_sg_loaded_liquids_${variation_num}_${cargo_variant_num}_${cab_variant} {
                loaded:  [
                    ${vehicle.id}_ss_loaded_liquids_${variation_num}_${cargo_variant_num}_${cab_variant},
                ];
                loading: [
                    ${vehicle.id}_ss_loaded_liquids_${variation_num}_${cargo_variant_num}_${cab_variant},
                ];
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_loaded_graphics_${variation_num}_${cargo_variant_num}_${cab_variant}, cargo_type_in_veh) {
                <tal:tanktainers repeat="tanktainer_cargo consist.cargos_with_tanktainer_graphics">
                    ${tanktainer_cargo}: return ${vehicle.id}_sg_loaded_liquids_${variation_num}_${cargo_variant_num}_${cab_variant};
                </tal:tanktainers>
                return ${vehicle.id}_sg_loaded_box_${variation_num}_${cargo_variant_num}_${cab_variant};
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_${cab_variant}, cargo_count*100/cargo_capacity) {
                    0: return ${vehicle.id}_sg_empty_${variation_num}_${cargo_variant_num}_${cab_variant};
                return ${vehicle.id}_switch_loaded_graphics_${variation_num}_${cargo_variant_num}_${cab_variant};
            }

        </tal:cab_variants>

        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_check_preceding_vehicle_same_id,
                                    ${vehicle.get_nml_expression_for_id_of_neighbouring_unit(unit_offset=-1)}) {
            ${vehicle.id}: return ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_1; // same vehicle, show no cab
            return ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_0; // different IH vehicle, show front cab
        }

        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_check_preceding_vehicle_same_grf,
                                    ${vehicle.get_nml_expression_for_grfid_of_neighbouring_unit(unit_offset=-1)}) {
            str2number("${global_constants.grfid}"): ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_check_preceding_vehicle_same_id;
            return ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_0; // different grf, show front cab
        }

        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_check_following_vehicle_same_id,
                                    ${vehicle.get_nml_expression_for_id_of_neighbouring_unit(unit_offset=1)}) {
            ${vehicle.id}: ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_check_preceding_vehicle_same_grf;
            return ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_2; // different IH vehicle, show rear cab
        }

        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num},
                                    ${vehicle.get_nml_expression_for_grfid_of_neighbouring_unit(unit_offset=1)}) {
            str2number("${global_constants.grfid}"): ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_check_following_vehicle_same_id;
            return ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num}_2; // different grf, show rear cab
        }

    </tal:cargo_colour_variant>

    random_switch (FEAT_TRAINS, ${vehicle.get_nml_expression_for_cargo_variant_random_switch(variation_num)}) {
        <tal:random_graphics_variations repeat="cargo_variant_num range(consist.num_random_cargo_variants)">
            1: return ${vehicle.id}_switch_graphics_${variation_num}_${cargo_variant_num};
        </tal:random_graphics_variations>
    }

</tal:sprites_random_variations>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics
<tal:include metal:use-macro="load: offsets_buy_menu.pynml" />

spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}_0.png") {
  spriteset_template_purchase_${vehicle.id}()
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<tal:include metal:use-macro="load: capacity_switches.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />
