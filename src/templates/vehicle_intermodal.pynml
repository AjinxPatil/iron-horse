<tal:include metal:use-macro="load: spriteset_templates_purchase.pynml" />

<!--! 'reversed' is random reversal on construction, depending on vehicle random bits
      'flipped' is user flipping vehicle in depot
      don't conflate them :) -->

// graphics chain for vehicle platform
spriteset(${vehicle.id}_ss_unflipped, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_unflipped(10 + ${vehicle.spriterow_num * 30})
}
spriteset(${vehicle.id}_ss_flipped, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_flipped(10 + ${vehicle.spriterow_num * 30} + 30)
}

// handle user flipped state
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_platform, vehicle_is_flipped) {
    1: return ${vehicle.id}_ss_flipped;
    return ${vehicle.id}_ss_unflipped;
}

// graphics chain for containers
<!--! note that spritesets are global for intermodal containers -->
<tal:container_spriteset_random_switches repeat="container_gestalt intermodal_containers.get_container_gestalts_by_length(vehicle.vehicle_length)">
    random_switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_containers_random_${container_gestalt.type}, bitmask(TRIGGER_VEHICLE_NEW_LOAD)) {
        <tal:container_types repeat="variant container_gestalt.variants">
            1: return ss_intermodal_containers_${consist.floor_height_type}_${container_gestalt.type}_${4 * vehicle.vehicle_length}px_${repeat.variant.index};
        </tal:container_types>
    }
</tal:container_spriteset_random_switches>
<!--! pseudo cargo checking code
    1. check known labels -> named random switch
    2. check known classes -> named random switch
    3. fall back to random switch for box
-->

// check generic cargo classes
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_class_liquid, cargo_classes & bitmask(CC_LIQUID)) {
    0: ${vehicle.id}_switch_graphics_vehicle_containers_random_box;
    return ${vehicle.id}_switch_graphics_vehicle_containers_random_tank;
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_class_bulk, cargo_classes & bitmask(CC_BULK)) {
    0: ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_class_liquid;
    return ${vehicle.id}_switch_graphics_vehicle_containers_random_bulk;
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_class_refrigerated, cargo_classes & bitmask(CC_REFRIGERATED)) {
    0: ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_class_bulk;
    return ${vehicle.id}_switch_graphics_vehicle_containers_random_reefer;
}

// check explicit cargo labels
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_label, cargo_type_in_veh) {
    <tal:cargo_label_container_type_mapping repeat="cargo_label global_constants.intermodal_container_cargo_label_mapping.items()">
        ${cargo_label[0]}: ${vehicle.id}_switch_graphics_vehicle_containers_random_${cargo_label[1]};
    </tal:cargo_label_container_type_mapping>
    return ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_class_refrigerated;
}

<!--! load state is assumed to be all or nothing - any cargo = full load of containers -->
<!--! !! might want to handle intermediate load states when multiple containers are used ?? 50:50 -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_containers, cargo_count) {
        0: return ss_intermodal_containers_empty;
    return ${vehicle.id}_switch_graphics_vehicle_containers_check_cargo_label;
}

// switch layers: base platform / containers
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, getbits(extra_callback_info1, 8, 8)) {
    0: return ${vehicle.id}_switch_graphics_vehicle_platform;
    1: return ${vehicle.id}_switch_graphics_vehicle_containers;
}


// buy menu graphics chain
spriteset(${vehicle.id}_ss_vehicle_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    0: return ${vehicle.id}_ss_vehicle_purchase;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

