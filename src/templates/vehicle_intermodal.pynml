<tal:include metal:use-macro="load: spriteset_templates_purchase.pynml" />

<!--! 'reversed' is random reversal on construction, depending on vehicle random bits
      'flipped' is user flipping vehicle in depot
      don't conflate them :) -->

// graphics chain for vehicle platform
// position variants are 'default', 'first', 'last', 'middle', etc, and are dependent on consist_ruleset
<tal:position_variants repeat="position_variant consist.gestalt_graphics.position_variants">
    spriteset(${vehicle.id}_ss_${position_variant}_unflipped, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_unflipped(10 + ${repeat.position_variant.index * 60})
    }
    spriteset(${vehicle.id}_ss_${position_variant}_flipped, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_reversed_${vehicle.vehicle_length}_8_flipped(10 + ${repeat.position_variant.index * 60} + 30)
    }

    // handle user flipped state
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_${position_variant}, vehicle_is_flipped) {
        1: return ${vehicle.id}_ss_${position_variant}_flipped;
        return ${vehicle.id}_ss_${position_variant}_unflipped;
    }
</tal:position_variants>

<tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == '2_unit_sets'">
    // consist position switches - copied from railcars
    <!--! if 1 unit in sequence -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_1, position_in_vehid_chain % 2) {
        0: return ${vehicle.id}_switch_graphics_platform_default;
    }

    <!--! if 2 units in sequence -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_2, position_in_vehid_chain % 2) {
        0: return ${vehicle.id}_switch_graphics_platform_first;
        return ${vehicle.id}_switch_graphics_platform_last;
    }

    <!--! this is a remainder block, how many units are in it? -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_less_than_2_remaining, num_vehs_in_vehid_chain % 2) {
        1: return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_1;
        return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_2;
    }

    <!--! given the consist, how many blocks of 2 units are there?  Is the unit within a block of 2, or a remainder block? -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_position_in_consist_entry_point, position_in_vehid_chain >= (num_vehs_in_vehid_chain - (num_vehs_in_vehid_chain  % 2))) {
        1: return ${vehicle.id}_switch_graphics_platform_less_than_2_remaining;
        return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_2;
    }
</tal:position_ruleset>

<tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == '4_unit_sets'">
    // consist position switches - copied from railcars
    <!--! if 1 unit in sequence -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_1, position_in_vehid_chain % 4) {
        0: return ${vehicle.id}_switch_graphics_platform_default;
    }

    <!--! if 2 units in sequence -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_2, position_in_vehid_chain % 4) {
        0: return ${vehicle.id}_switch_graphics_platform_first;
        return ${vehicle.id}_switch_graphics_platform_last;
    }

    <!--! if 3 units in sequence -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_3, position_in_vehid_chain % 4) {
        0: return ${vehicle.id}_switch_graphics_platform_first;
        1: return ${vehicle.id}_switch_graphics_platform_middle;
        return ${vehicle.id}_switch_graphics_platform_last;
    }

    <!--! if 4 units in sequence -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_4, position_in_vehid_chain % 4) {
        0: return ${vehicle.id}_switch_graphics_platform_first;
        1: return ${vehicle.id}_switch_graphics_platform_middle;
        2: return ${vehicle.id}_switch_graphics_platform_middle;
        return ${vehicle.id}_switch_graphics_platform_last;
    }

    <!--! this is a remainder block, how many units are in it? -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_less_than_4_remaining, num_vehs_in_vehid_chain % 4) {
        1: return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_1;
        2: return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_2;
        3: return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_3;
        return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_4;
    }

    <!--! given the consist, how many blocks of 6 units are there?  Is the unit within a block of 4, or a remainder block? -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_position_in_consist_entry_point, position_in_vehid_chain >= (num_vehs_in_vehid_chain - (num_vehs_in_vehid_chain  % 4))) {
        1: return ${vehicle.id}_switch_graphics_platform_less_than_4_remaining;
        return ${vehicle.id}_switch_graphics_platform_modulo_num_units_in_consist_4;
    }
</tal:position_ruleset>

// graphics chain for containers
<!--! note that spritesets are global for intermodal containers -->
<tal:container_spriteset_random_switches repeat="container_gestalt intermodal_containers.get_container_gestalts_by_length(vehicle.vehicle_length)">
    random_switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers_random_${container_gestalt.container_subtype}, bitmask(TRIGGER_VEHICLE_NEW_LOAD)) {
        <tal:container_types repeat="variant container_gestalt.variants">
            1: return switch_intermodal_containers_${consist.floor_height_type}_${container_gestalt.container_subtype}_${4 * vehicle.vehicle_length}px_${repeat.variant.index};
        </tal:container_types>
    }
</tal:container_spriteset_random_switches>

<!--! pseudo cargo checking code
    1. check known labels -> named random switch
    2. check known classes -> named random switch
    3. fall back to random switch for box
-->

// check generic cargo classes
// bulk class is explicitly not checked as there are no meaningful default bulk sprites
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers_check_cargo_class_liquid, cargo_classes & bitmask(CC_LIQUID)) {
    0: ${vehicle.id}_switch_graphics_containers_random_box_DFLT;
    return ${vehicle.id}_switch_graphics_containers_random_tank_DFLT;
}
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers_check_cargo_class_refrigerated, cargo_classes & bitmask(CC_REFRIGERATED)) {
    0: ${vehicle.id}_switch_graphics_containers_check_cargo_class_liquid;
    return ${vehicle.id}_switch_graphics_containers_random_reefer_DFLT;
}

// check explicit cargo labels
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers_check_cargo_label, cargo_type_in_veh) {
    <tal:cargo_label_container_type_mapping repeat="cargo_label consist.gestalt_graphics.cargo_label_mapping.items()">
        <tal:exclude_default condition="cargo_label[0] is not 'DFLT'">
            ${cargo_label[0]}: ${vehicle.id}_switch_graphics_containers_random_${cargo_label[1]};
        </tal:exclude_default>
    </tal:cargo_label_container_type_mapping>
    return ${vehicle.id}_switch_graphics_containers_check_cargo_class_refrigerated;
}

<!--! load state is assumed to be all or nothing - any cargo = full load of containers -->
<!--! !! might want to handle intermediate load states when multiple containers are used ?? 50:50 -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers_check_cargo, cargo_count) {
        0: return ss_intermodal_containers_empty;
    return ${vehicle.id}_switch_graphics_containers_check_cargo_label;
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers, STORE_TEMP(base_sprite_2cc + 16 * company_colour2 + company_colour1, 0x100)) {
    return ${vehicle.id}_switch_graphics_containers_check_cargo;
}

// switch layers: base platform / containers
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, getbits(extra_callback_info1, 8, 8)) {
    0: return ${vehicle.id}_switch_graphics_platform_position_in_consist_entry_point;
    1: return ${vehicle.id}_switch_graphics_containers;
}


// buy menu graphics chain
spriteset(${vehicle.id}_ss_vehicle_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    0: return ${vehicle.id}_ss_vehicle_purchase;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<!--! dedicated colour remapping of second intermodal livery
     (does this work for NA Horse? Dunno yet, find out when that happens)  -->
// handle user flipped state
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, vehicle_is_flipped) {
    1: return base_sprite_2cc + 16 * company_colour1 + company_colour2; <!--! swap 1CC and 2CC -->
    return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

