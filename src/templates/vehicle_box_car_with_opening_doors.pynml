<!--! box cars that have doors closed when empty / loaded, and doors open when loading -->

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
<tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
    // default graphics chain
    spriteset(${vehicle.id}_ss_doors_closed_${flipped}, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name('unreversed', flipped, 10 + (vehicle.spriterow_num * 30))}
    }
    spriteset(${vehicle.id}_ss_doors_open_${flipped}, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name('unreversed', flipped, 10 + (vehicle.spriterow_num * 30) + 30)}
    }
</tal:user_flipped>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle,
        [switch_graphics_box_car_with_opening_doors_check_flip() + switch_graphics_opening_doors()]) {
    <!--! stupid integer stuffing scheme to detect flip / doors states, see the procedures for the schema -->
    0: return ${vehicle.id}_ss_doors_closed_unflipped;
    1: return ${vehicle.id}_ss_doors_open_unflipped;
    10: return ${vehicle.id}_ss_doors_closed_flipped;
    11: return ${vehicle.id}_ss_doors_open_flipped;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${graphics_path}${consist.id}.png") {
    ${consist.get_nml_for_spriteset_template(y_offset=0)}
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      when there is nothing specific, then this is just a null switch -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_ss_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

