<!--! box cars that have doors closed when empty / loaded, and doors open when loading -->

<tal:include metal:use-macro="load: spriteset_templates_purchase.pynml" />

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
<tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
    // default graphics chain
    spriteset(${vehicle.id}_ss_doors_closed_${flipped}, "${graphics_path}${consist.id}.png") {
        spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_${flipped}(10)
    }
    spriteset(${vehicle.id}_ss_doors_open_${flipped}, "${graphics_path}${consist.id}.png") {
        spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_${flipped}(10 + 30)
    }

    <!--! be aware that 'loaded' in nml is really 'moving', i.e. not in a station loading/unloading -->
    spritegroup ${vehicle.id}_sg_part_load_or_empty_${flipped} {
        loaded:  [
            ${vehicle.id}_ss_doors_closed_${flipped},
        ];
        loading: [
            ${vehicle.id}_ss_doors_open_${flipped},
        ];
    }
    spritegroup ${vehicle.id}_sg_full_load_${flipped} {
        loaded:  [
            ${vehicle.id}_ss_doors_closed_${flipped},
        ];
        loading: [
            ${vehicle.id}_ss_doors_closed_${flipped},
        ];
    }
    <!--! spritegroups aren't needed here, the loading state is calculated explicitly -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_percent_loaded_${flipped}, cargo_count*100/cargo_capacity) {
            0..99: return ${vehicle.id}_sg_part_load_or_empty_${flipped};
        return ${vehicle.id}_sg_full_load_${flipped};
    }

</tal:user_flipped>

// handle user flipped state
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, vehicle_is_flipped) {
    1: return ${vehicle.id}_switch_graphics_percent_loaded_flipped;
    return ${vehicle.id}_switch_graphics_percent_loaded_unflipped;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${graphics_path}${consist.id}.png") {
    spriteset_template_purchase_${vehicle.id}(10)
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      when there is nothing specific, then this is just a null switch -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_sg_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

