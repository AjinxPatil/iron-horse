<!--! box cars that have doors closed when empty / loaded, and doors open when loading -->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<!--! this template does not support 'random_reverse' property or user-flipping
      box cars are always symmetrical, no need for extra complexity
      there is an assert for this in train.py -->
// default graphics chain
spriteset(${vehicle.id}_ss_doors_closed, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_unflipped(10)
}
spriteset(${vehicle.id}_ss_doors_open, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_unflipped(10 + 30)
}

spritegroup ${vehicle.id}_sg {
    loaded:  [
        ${vehicle.id}_ss_doors_closed,
    ];
    loading: [
        ${vehicle.id}_ss_doors_open,
    ];
}
// a default switch_graphics is always needed
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_unreversed, 0) {
    1: return ${vehicle.id}_sg;
    return ${vehicle.id}_sg;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_sg_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

