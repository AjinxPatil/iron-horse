switch (FEAT_TRAINS, SELF, ${unit_variant.id}_switch_name, [
        <!--! this does not first initialise all registers to empty string
              that may give rise to unwanted side effects if any are not set due to varying numbers of substrings
              but appears to be ok so far -->
        <tal:name_parts repeat="name_part consist.get_name_as_text_stack(context='default_name', unit_variant=unit_variant)">
            STORE_TEMP(
                ${name_part},
                ${37 + repeat.name_part.index}
            ),
        </tal:name_parts>
        <tal:name_parts repeat="name_part consist.get_name_as_text_stack(context='purchase_level_0', unit_variant=unit_variant)">
            STORE_TEMP(
                ${name_part},
                ${41 + repeat.name_part.index}
            ),
        </tal:name_parts>
        <tal:name_parts repeat="name_part consist.get_name_as_text_stack(context='purchase_level_1', unit_variant=unit_variant)">
            STORE_TEMP(
                ${name_part},
                ${45 + repeat.name_part.index}
            ),
        </tal:name_parts>
        <tal:name_parts repeat="name_part consist.get_name_as_text_stack(context='autoreplace_lhs', unit_variant=unit_variant)">
            STORE_TEMP(
                ${name_part},
                ${51 + repeat.name_part.index}
            ),
        </tal:name_parts>
        <!--! !!!!!!!!! vehicle.unit_variants[0] is a shim hack following move to consist not unit_variant scope;
            also this reuses the name property, no stack, as that's all we need in some cases -->
        STORE_TEMP(
            ${consist.get_name_as_property(vehicle.unit_variants[0])},
            57
        ),
        param_simplified_gameplay
    ]) {
    <!--! simplified gameplay uses minimal variant nesting, so just use default name -->
    1: switch_name_purchase_default;
    return switch_name_not_simplified_gameplay;
}

