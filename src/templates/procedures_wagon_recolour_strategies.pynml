<!--! ** Various strategies for random recolouring of vehicles / intermodal containers ** -->

<tal:colour_sets repeat="colour_set global_constants.colour_sets.items()">
    <!--! note that random bits need to be unique within the switch chain to prevent dependent results -->
    <!--! uses 1 random bit from self, just 2 colour choices, more is overkill and often looks bad -->
    switch (FEAT_TRAINS, SELF, switch_colour_set_${colour_set[0]}_1cc,
                <!--! check if randomisation is enabled (player parameter) -->
                param_wagon_colour_randomisation && LOAD_TEMP(${temp_storage_ids.flag_use_weathering})
                ? random_bits_colour_set()
                : 0) {
        1: return ${utils.unpack_colour(colour_set[1][1], 1)};
        return ${utils.unpack_colour(colour_set[1][0], 1)};
    }
    switch (FEAT_TRAINS, SELF, switch_colour_set_${colour_set[0]}_2cc,
                <!--! check if randomisation is enabled (player parameter) -->
                param_wagon_colour_randomisation && LOAD_TEMP(${temp_storage_ids.flag_use_weathering})
                ? random_bits_colour_set()
                : 0) {
        1: return ${utils.unpack_colour(colour_set[1][1], 2)};
        return ${utils.unpack_colour(colour_set[1][0], 2)};
    }
</tal:colour_sets>

<!--! convenience switch to define how to pick a colour -->
switch(FEAT_TRAINS, SELF, switch_get_colour_constant_for_strategy, context_company_colour, LOAD_TEMP(${temp_storage_ids.wagon_recolour_strategy_num})) {
    -3: return param_wagon_base_colour; <!--! blah blah this might not actualy be the correct CC but eh -->
    -2: return context_company_colour; <!--! blah blah this might not actualy be the correct CC but eh -->
    -1: return context_company_colour; <!--! blah blah this might not actualy be the correct CC but eh -->
    0: return context_company_colour; <!--! blah blah this might not actualy be the correct CC but eh -->
    return; <!--! just return the recolour strategy number -->
}

<!--! * Strategies for random recolouring of wagons *
    1. strategies apply rules to branch to colour sets, which apply a random choice from 2 shades of the chosen colour (as of Nov 2020)
    2. player parameter can choose certain strategies explicitly
    3. magic may or may not get added for engine-specific or cargo-specific colours
-->

<!--! as of Dec 2019 this was not used with articulated vehicles,
      Â¿ however as of August 2022 type D (articulated) wagons appear to use this so eh, maybe it got extended? -->

<tal:switch_colour_set_use_weathering repeat="cc [['1cc', '2cc'], ['1cc', '1cc'], ['2cc', '1cc'], ['2cc', '2cc']]">
    switch (FEAT_TRAINS, SELF, switch_colour_set_use_weathering_${cc[0]}_to_${cc[1]},
                        switch_get_colour_constant_for_strategy(
                            company_colour${cc[1][0]}
                        )
                    ) {
        <tal:colour_sets repeat="colour_set global_constants.colour_sets.items()">
            <!--! this relies on order matching the order of company colours per nml / openttd constants;
                  e.g. COLOUR_DARK_BLUE = 0, COLOUR_WHITE= 15
                  we then extend our own custom colour sets after the default colours -->
            <!--! // debug: ${colour_set[1][0]}, ${colour_set[1][1]} -->
            ${repeat.colour_set.index}: switch_colour_set_${colour_set[0]}_${cc[0]};
        </tal:colour_sets>
    }
</tal:switch_colour_set_use_weathering>

<!--! STRATEGIES - Note that not every combination of bases is currently provided -->
<tal:strategy_randomise_from_2_bases repeat="cc [['1cc', '2cc'], ['2cc', '1cc']]">
    <!--! Colour is randomised on build, from 1CC/2CC (or other rules?), and will be inverted if player flips vehicle -->
    <tal:strategy_randomise_from_2_bases_use_weathering>
        switch (FEAT_TRAINS, SELF, switch_strategy_randomise_from_2_bases_${cc[0]}_unflipped,
                    <!--! check if randomisation is enabled (player parameter) -->
                    <!--! note that random bits need to be unique within the switch chain to prevent dependent results -->
                    param_wagon_colour_randomisation
                    ? random_bits_base_colour()
                    : 0) {
            1: switch_colour_set_use_weathering_${cc[0]}_to_${cc[1]};
            switch_colour_set_use_weathering_${cc[0]}_to_${cc[0]};
        }
        switch (FEAT_TRAINS, SELF, switch_strategy_randomise_from_2_bases_${cc[0]}_flipped,
                    <!--! check if randomisation is enabled (player parameter) -->
                    <!--! note that random bits need to be unique within the switch chain to prevent dependent results -->
                    param_wagon_colour_randomisation
                    ? random_bits_base_colour()
                    : 0) {
            1: switch_colour_set_use_weathering_${cc[0]}_to_${cc[0]};
            switch_colour_set_use_weathering_${cc[0]}_to_${cc[1]};
        }
        switch (FEAT_TRAINS, SELF, switch_strategy_randomise_from_2_bases_${cc[0]}, LOAD_TEMP(${temp_storage_ids.vehicle_is_flipped_purchase_safe})) {
            1: switch_strategy_randomise_from_2_bases_${cc[0]}_flipped;
            switch_strategy_randomise_from_2_bases_${cc[0]}_unflipped;
        }
</tal:strategy_randomise_from_2_bases>

<tal:strategy_invert_cc_on_flip repeat="cc [['1cc', '2cc'], ['2cc', '1cc']]">
    <!--! CC is not randomised 1CC / 2CC on build, but will be inverted if player flips vehicle -->
    switch (FEAT_TRAINS, SELF, switch_strategy_invert_cc_on_flip_${cc[0]}, LOAD_TEMP(${temp_storage_ids.vehicle_is_flipped_purchase_safe})) {
        1: switch_colour_set_use_weathering_${cc[0]}_to_${cc[1]};
        switch_colour_set_use_weathering_${cc[0]}_to_${cc[0]};
    }
</tal:strategy_invert_cc_on_flip>

<tal:select_strategy_from_param repeat="cc ['1cc', '2cc']">
    switch (FEAT_TRAINS, SELF, switch_select_randomisation_strategy_${cc}, LOAD_TEMP(${temp_storage_ids.wagon_recolour_strategy_num})) {
        0: switch_strategy_randomise_from_2_bases_${cc};
        -1: switch_strategy_invert_cc_on_flip_${cc};
        -2: switch_strategy_invert_cc_on_flip_${cc};
        <!--! !!! default is unfinished -->
        switch_strategy_randomise_from_2_bases_${cc};
    }
</tal:select_strategy_from_param>

switch (FEAT_TRAINS, SELF, switch_cc_num_to_recolour, LOAD_TEMP(${temp_storage_ids.cc_num_to_recolour})) {
    1: switch_select_randomisation_strategy_1cc;
    2: switch_select_randomisation_strategy_2cc;
}

switch (FEAT_TRAINS, SELF, switch_colour_mapping, cc_num_to_recolour, wagon_recolour_strategy_num, flag_use_weathering,
                [
                 STORE_TEMP(cc_num_to_recolour, ${temp_storage_ids.cc_num_to_recolour}),
                 STORE_TEMP(wagon_recolour_strategy_num, ${temp_storage_ids.wagon_recolour_strategy_num}),
                 STORE_TEMP(flag_use_weathering, ${temp_storage_ids.flag_use_weathering}),
                 STORE_TEMP(vehicle_is_flipped, ${temp_storage_ids.vehicle_is_flipped_purchase_safe})
                ]) {
    switch_cc_num_to_recolour;
}
switch (FEAT_TRAINS, SELF, switch_colour_mapping_purchase, cc_num_to_recolour, wagon_recolour_strategy_num, flag_use_weathering,
                [
                 STORE_TEMP(cc_num_to_recolour, ${temp_storage_ids.cc_num_to_recolour}),
                 STORE_TEMP(wagon_recolour_strategy_num, ${temp_storage_ids.wagon_recolour_strategy_num}),
                 STORE_TEMP(flag_use_weathering, ${temp_storage_ids.flag_use_weathering}),
                 <!--! don't check vehicle_is_flipped in purchase list as it's invalid for purchase list and will return 1 as undefined behaviour -->
                 STORE_TEMP(0, ${temp_storage_ids.vehicle_is_flipped_purchase_safe})
                ]) {
    switch_cc_num_to_recolour;
}

<!--! * Strategies for random recolouring of intermodal containers * -->

<!--!  these are rudimentary in that
       1. they won't recolour within the container group, only between wagons
       2. only 1cc is recoloured due to combinatorial explosion if both 1cc and 2cc are randomised in recolour sprites (those sprites _could_ be generated though)
       3. I didn't check if the random bits used to choose colour set collide with any other uses
       4. this works for train wagons, wouldn't work for ships as individual containers can't be controlled
-->

<!--!! possibly it would be better better to
     - generate box containers for all the CC variants directly in Polar Fox, including the alternative shade for every company colour
     - then compose those into fixed container groups in Iron Horse (cc1_alt etc), so each group produces 16 colour variants
     - then switch the final sprites on the company current colour
     - seems like work, but it's what ships will probably need to do?
     - would non-trivially complicate generating intermodal container spritesets etc
     - also would remove randomisation from non-box containers
     - so basically, unappealing-->
<!--!<tal:switch_by_company_colour repeat="cc [['1cc', '2cc'], ['1cc', '1cc'], ['2cc', '1cc'], ['2cc', '2cc']]">-->
<tal:switch_by_company_colour repeat="cc [['1cc', '1cc']]">
    switch (FEAT_TRAINS, SELF, switch_intermodal_by_company_colour_${cc[0]}_to_${cc[1]}, company_colour${cc[1][0]}) {
        COLOUR_DARK_BLUE: switch_colour_set_dark_blue_${cc[0]};
        COLOUR_PALE_GREEN: switch_colour_set_pale_green_${cc[0]};
        COLOUR_PINK: switch_colour_set_pink_${cc[0]};
        COLOUR_YELLOW: switch_colour_set_yellow_${cc[0]};
        COLOUR_RED: switch_colour_set_red_${cc[0]};
        COLOUR_LIGHT_BLUE: switch_colour_set_light_blue_${cc[0]};
        COLOUR_GREEN: switch_colour_set_green_${cc[0]};
        COLOUR_DARK_GREEN: switch_colour_set_dark_green_${cc[0]};
        COLOUR_BLUE: switch_colour_set_blue_${cc[0]};
        COLOUR_CREAM: switch_colour_set_cream_${cc[0]};
        COLOUR_MAUVE: switch_colour_set_mauve_${cc[0]};
        COLOUR_PURPLE: switch_colour_set_purple_${cc[0]};
        COLOUR_ORANGE: switch_colour_set_orange_${cc[0]};
        COLOUR_BROWN: switch_colour_set_brown_${cc[0]};
        COLOUR_GREY: switch_colour_set_grey_${cc[0]};
        COLOUR_WHITE: switch_colour_set_white_${cc[0]};
    }
</tal:switch_by_company_colour>


<!--! * Strategy for forcing express intermodal to match cargo sprinter * -->

<!--! this doesn't strictly belong in here as it's not random, but it's a convenient location for this niche case
      it's also not a procedure, it's just a switch yielding a result-->
switch (FEAT_TRAINS, SELF, intermodal_car_switch_colour_mapping_not_a_cargo_sprinter, vehicle_is_flipped) {
    1: return base_sprite_2cc + 16 * company_colour1 + company_colour2; <!--! swap 1CC and 2CC -->
    return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
}
<!--! check parent engine ID to see if company colour should be forced to match -->
switch (FEAT_TRAINS, PARENT, intermodal_car_switch_colour_mapping_force_if_cargo_sprinter, vehicle_type_id) {
    <!--! this doesn't check grfid currently - add later if needed -->
    <tal:cargo_sprinter_ids repeat="engine_id roster_manager.cargo_sprinter_ids">
        <!--! apply regular 1CC and 2CC - note that this _should_ take the PARENT scope for those values -->
        ${engine_id}: base_sprite_2cc + 16 * company_colour2 + company_colour1;
    </tal:cargo_sprinter_ids>
    return intermodal_car_switch_colour_mapping_not_a_cargo_sprinter;
}
