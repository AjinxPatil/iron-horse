
<!--! all spritelayer cargos share the same 'empty' spriteset -->
spriteset(ss_spritelayer_cargos_empty, "src/graphics/spriterow_template.png") {
    spriteset_template_asymmetric_unreversed_8_8_unflipped(10, NOANIM)
}

<!--! the spritesets are interleaved with the switches by design; doing a block of contiguous spritesets causes the nml spritegroups limit to be hit (probably ran out of real action 2 IDs) -->
<tal:spritelayer_cargo define="spritelayer_cargo spritelayer_cargos.intermodal_containers.IntermodalCargo()">
    <tal:platform_types repeat="platform_type spritelayer_cargo.cargos_by_platform_type_and_length.keys()">
        <tal:platform_length repeat="platform_length spritelayer_cargo.cargos_by_platform_type_and_length[platform_type].keys()">
            <tal:container_spritesets repeat="cargo spritelayer_cargo.cargos_by_platform_type_and_length[platform_type][platform_length]">
                <tal:variants repeat="variant cargo.variants">
                    spriteset(ss_spritelayer_cargos_${spritelayer_cargo.base_id}_${platform_type}_${platform_length}px_${cargo.container_subtype}_${repeat.variant.index}_unflipped, "${graphics_path}${cargo.id}.png") {
                        spriteset_template_asymmetric_unreversed_${int(cargo.length / 4)}_8_unflipped(10 + ${repeat.variant.index * 30}, NOANIM)
                    }
                    spriteset(ss_spritelayer_cargos_${spritelayer_cargo.base_id}_${platform_type}_${platform_length}px_${cargo.container_subtype}_${repeat.variant.index}_flipped, "${graphics_path}${cargo.id}.png") {
                        spriteset_template_asymmetric_reversed_${int(cargo.length / 4)}_8_flipped(10 + ${repeat.variant.index * 30}, NOANIM)
                    }
                    <!--! handle user flipped state
                        generally containers do not flip, even when base platform is flipped
                        but there is a flag that permits them to flip to handle cases like rear unit of cargo sprinter which requires reversed containers due to asymmetry
                    -->
                    switch (FEAT_TRAINS, SELF, switch_spritelayer_cargos_${spritelayer_cargo.base_id}_${platform_type}_${platform_length}px_${cargo.container_subtype}_${repeat.variant.index},
                                        [vehicle_is_flipped && LOAD_TEMP(${temp_storage_ids.unreversible_containers})]) {
                        1: return ss_spritelayer_cargos_${spritelayer_cargo.base_id}_${platform_type}_${platform_length}px_${cargo.container_subtype}_${repeat.variant.index}_flipped;
                        return ss_spritelayer_cargos_${spritelayer_cargo.base_id}_${platform_type}_${platform_length}px_${cargo.container_subtype}_${repeat.variant.index}_unflipped;
                    }
                </tal:variants>
                <!--! random switches will only be generated where needed, nml would optimise these out, but it's preferable to not provide them -->
                <tal:optional_random condition="spritelayer_cargos.intermodal_containers.cargo_has_random_variants_for_cargo_label(platform_type, platform_length, cargo.container_subtype)">
                    random_switch (FEAT_TRAINS, SELF, switch_spritelayer_cargos_${spritelayer_cargo.base_id}_random_${platform_type}_${platform_length}px_${cargo.container_subtype}, bitmask(TRIGGER_VEHICLE_NEW_LOAD)) {
                        <tal:container_types repeat="variant cargo.variants">
                                1: return switch_spritelayer_cargos_${spritelayer_cargo.base_id}_${platform_type}_${platform_length}px_${cargo.container_subtype}_${repeat.variant.index};
                        </tal:container_types>
                    }
                </tal:optional_random>
            </tal:container_spritesets>
            <!--! pseudo cargo checking code
                1. check known labels -> named random switch
                2. check known classes -> named random switch
                3. fall back to random switch for box
            -->
           <!--! check generic cargo classes
                  bulk class is explicitly not checked as there are no meaningful default bulk sprites
            -->
            switch (FEAT_TRAINS, SELF, switch_spritelayer_cargos_containers_check_cargo_class_liquid_${platform_type}_${platform_length}px, cargo_classes & bitmask(CC_LIQUID)) {
                0: return ${spritelayer_cargos.intermodal_containers.get_next_cargo_switch(platform_type, platform_length, 'box_DFLT')};
                return ${spritelayer_cargos.intermodal_containers.get_next_cargo_switch(platform_type, platform_length, 'tank_DFLT')};
            }
            switch (FEAT_TRAINS, SELF, switch_spritelayer_cargos_containers_check_cargo_class_refrigerated_${platform_type}_${platform_length}px, cargo_classes & bitmask(CC_REFRIGERATED)) {
                0: switch_spritelayer_cargos_containers_check_cargo_class_liquid_${platform_type}_${platform_length}px;
                return ${spritelayer_cargos.intermodal_containers.get_next_cargo_switch(platform_type, platform_length, 'reefer_DFLT')};
            }
            <!--! check explicit cargo labels -->
            switch (FEAT_TRAINS, SELF, switch_spritelayer_cargos_${spritelayer_cargo.base_id}_${platform_type}_${platform_length}px, cargo_type_in_veh) {
                <tal:cargo_label_container_type_mapping repeat="cargo_map spritelayer_cargos.intermodal_containers.GestaltGraphicsIntermodal().cargo_label_mapping.items()">
                    ${cargo_map[0]}: ${spritelayer_cargos.intermodal_containers.get_next_cargo_switch(platform_type, platform_length, cargo_map[1])};
                </tal:cargo_label_container_type_mapping>
                return switch_spritelayer_cargos_containers_check_cargo_class_refrigerated_${platform_type}_${platform_length}px;
            }
        </tal:platform_length>
    </tal:platform_types>
</tal:spritelayer_cargo>
