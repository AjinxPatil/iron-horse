<!--! this is the template for caboose cars -->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<!--! this template does not support 'random_reverse' property or 'allow_flip' user-flipping
      cargo vehicles using this template are always symmetrical, no need for extra complexity
      there is an assert for this in train.py -->
// default graphics chain
<tal:livery_variants repeat="livery_variant [1,2,3]">
        spriteset(${vehicle.id}_ss_${livery_variant}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_unflipped(10 + ${(livery_variant -1) * 30})
        }

        spritegroup ${vehicle.id}_sg_${livery_variant} {
            loaded:  [
                ${vehicle.id}_ss_${livery_variant},
            ];
            loading: [
                ${vehicle.id}_ss_${livery_variant},
            ];
        }
</tal:livery_variants>

switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_unreversed, vehicle_type_id) {
<!--! this doesn't check grfid currently - add later if needed -->
<!--!<tal:livery_2_engine_ids repeat="engine_id consist.livery_2_engine_ids"> -->
<tal:livery_2_engine_ids repeat="engine_id ['growler']">
    ${engine_id}: return ${vehicle.id}_sg_2;
</tal:livery_2_engine_ids>
<tal:livery_3_engine_ids repeat="engine_id ['wizzo']">
    ${engine_id}: return ${vehicle.id}_sg_3;
</tal:livery_3_engine_ids>
return ${vehicle.id}_sg_1;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_sg_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

