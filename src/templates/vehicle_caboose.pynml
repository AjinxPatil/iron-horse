<!--! this is the template for caboose cars -->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<!--! this template does not support 'random_reverse' property or 'allow_flip' user-flipping
      cargo vehicles using this template are always symmetrical, no need for extra complexity
      there is an assert for this in train.py -->
// default graphics chain
<!--! num_cargo_sprite_variants isn't strictly correct, but we're reusing an existing structure that should probably be renamed - April 2018 -->
<tal:livery_variant_nums repeat="livery_variant_num python:range(consist.gestalt_graphics.num_generations)">
    spriteset(${vehicle.id}_ss_${livery_variant_num}_unflipped, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_unflipped(10 + ${livery_variant_num * 60})
    }
    spriteset(${vehicle.id}_ss_${livery_variant_num}_flipped, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.id}_flipped(10 + ${livery_variant_num * 60} + 30)
    }

    spritegroup ${vehicle.id}_sg_${livery_variant_num}_unflipped {
        loaded:  [
            ${vehicle.id}_ss_${livery_variant_num}_unflipped,
        ];
        loading: [
            ${vehicle.id}_ss_${livery_variant_num}_unflipped,
        ];
    }
    spritegroup ${vehicle.id}_sg_${livery_variant_num}_flipped {
        loaded:  [
            ${vehicle.id}_ss_${livery_variant_num}_flipped,
        ];
        loading: [
            ${vehicle.id}_ss_${livery_variant_num}_flipped,
        ];
    }
    // handle user flipped state
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_livery_${livery_variant_num}, vehicle_is_flipped) {
        1: return ${vehicle.id}_sg_${livery_variant_num}_flipped;
        return ${vehicle.id}_sg_${livery_variant_num}_unflipped;
    }
</tal:livery_variant_nums>

switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_unreversed, vehicle_type_id) {
<!--! this doesn't check grfid currently - add later if needed -->
    <tal:livery_2_engine_ids repeat="engine_consist consist.roster.engine_consists">
        <!--! note that livery variants are zero-indexed, generations are one-indexed -->
        ${engine_consist.id}: return ${vehicle.id}_switch_graphics_livery_${engine_consist.gen - 1};
    </tal:livery_2_engine_ids>
    return ${vehicle.id}_switch_graphics_livery_0;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_sg_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

