<!--! this is the template for caboose cars -->

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
// default graphics chain
<tal:caboose_variants repeat="caboose_variant consist.spriterow_labels">
    spriteset(${vehicle.id}_ss_${caboose_variant}_unflipped, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name('unreversed', 'unflipped', 10 + (repeat.caboose_variant.index * 30))}
    }
    spriteset(${vehicle.id}_ss_${caboose_variant}_flipped, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name('unreversed', 'flipped', 10 + (repeat.caboose_variant.index * 30))}
    }

    <!--! handle user flipped state -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_variant_${caboose_variant}, vehicle_is_flipped) {
        1: return ${vehicle.id}_ss_${caboose_variant}_flipped;
        return ${vehicle.id}_ss_${caboose_variant}_unflipped;
    }
</tal:caboose_variants>

<tal:caboose_families repeat="caboose_family consist.roster.caboose_families[consist.base_track_type][consist.base_id].items()">
    // ${caboose_family}
    random_switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_caboose_family_${caboose_family[0]}) {
        <tal:caboose_family_variants repeat="caboose_variant caboose_family[1]">
            1: return ${vehicle.id}_switch_graphics_variant_${caboose_variant};
        </tal:caboose_family_variants>
    }
</tal:caboose_families>

switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_vehicle, vehicle_type_id) {
<!--! this doesn't check grfid currently - add later if needed
      this may also exceed the number of permitted ranges as number of engines increases, if that happens, try sharding (probably by roster) -->
    <tal:engine_consists repeat="engine_consist [engine_consist for engine_consist in consist.roster.engine_consists if engine_consist.base_track_type == consist.base_track_type]">
        ${engine_consist.id}: return ${vehicle.id}_switch_graphics_caboose_family_${engine_consist.caboose_families[consist.base_id]};
    </tal:engine_consists>
    <!--! default just uses first spriterow, this is often not going to be a good result, but JFDI for now  -->
    return ${vehicle.id}_switch_graphics_variant_${consist.spriterow_labels[0]};
}


// buy menu graphics chain
<tal:livery_variants repeat="livery_variant_num range(consist.gestalt_graphics.num_variations)">
    spriteset(${vehicle.id}_ss_purchase_${livery_variant_num}, "${graphics_path}${consist.id}.png") {
        ${consist.get_nml_for_spriteset_template(y_offset=livery_variant_num * 30)}
    }
</tal:livery_variants>

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch livery depending on game year -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, current_year) {
    <!--!
    <tal:livery_variants repeat="date_range consist.roster.intro_date_ranges(consist.base_track_type)">
        ${date_range[0]}..${date_range[1]}: return ${vehicle.id}_ss_purchase_${repeat.date_range.index};
    </tal:livery_variants>
    -->
    return ${vehicle.id}_ss_purchase_0;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties_vehicle.pynml" />

