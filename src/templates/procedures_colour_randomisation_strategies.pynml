<!--! strategies for random colour remapping (of wagons)  -->

<!--! as of Dec 2019 this is not used with articulated vehicles,
      however if articulated vehicle support is need it will need alternatives checking FORWARD_SELF(n)
      these will have to be duplicates of these switches on a repeat, with named entry points -->

// use param[andy's favorite number as base sprite]. this will be used similar as base_sprite_2cc
// only do this once per GRF. put all recolourings into the same block.

custom_wagon_recolour_sprites = reserve_sprites(16 * 2); <!--! 16 company colours * number of custom recolourings -->

replace(custom_wagon_recolour_sprites) {
    // recolour cc 1, use player setting for cc 2
    <tal:company_colour_maps repeat="company_colour_map_name polar_fox.constants.company_colour_maps.keys()">
        //${company_colour_map_name}
        recolour_sprite {
        <tal:company_colour_map repeat="colour_index polar_fox.constants.company_colour_maps[company_colour_map_name]">
            ${hex(198 + repeat.colour_index.index)}: 0x0F;
            ${hex(80 + repeat.colour_index.index)}: ${hex(colour_index)};
        </tal:company_colour_map>
        }
    </tal:company_colour_maps>
    // recolour cc 2, use player setting for cc 1
    <tal:company_colour_maps repeat="company_colour_map_name polar_fox.constants.company_colour_maps.keys()">
        //${company_colour_map_name}
        recolour_sprite {
        <tal:company_colour_map repeat="colour_index polar_fox.constants.company_colour_maps[company_colour_map_name]">
            ${hex(198 + repeat.colour_index.index)}: ${hex(colour_index)};
            ${hex(80 + repeat.colour_index.index)}: 0x0F;
        </tal:company_colour_map>
        }
    </tal:company_colour_maps>
}


<tal:fixed_colour_scheme_results define="random_bits 'getbits(random_bits, 0, 2)'">
    <!--! uses 2 random bits from self, enough for up to 4 colour choices
          note that there are 3 colours, but 4 random results, so switches weight to most pleasant colour in each case -->
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_blue_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_BLUE, company_colour2);
        2: return palette_2cc(COLOUR_DARK_BLUE, company_colour2);
        3: return palette_2cc(COLOUR_LIGHT_BLUE, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_blue_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_LIGHT_BLUE);
        1..2: return palette_2cc(company_colour1, COLOUR_BLUE);
        3: return palette_2cc(company_colour1, COLOUR_DARK_BLUE);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_dark_blue_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_DARK_BLUE, company_colour2);
        2: return palette_2cc(COLOUR_BLUE, company_colour2);
        3: return palette_2cc(COLOUR_LIGHT_BLUE, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_dark_blue_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_LIGHT_BLUE);
        1..2: return palette_2cc(company_colour1, COLOUR_DARK_BLUE);
        3: return palette_2cc(company_colour1, COLOUR_BLUE);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_light_blue_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_LIGHT_BLUE, company_colour2);
        2: return palette_2cc(COLOUR_BLUE, company_colour2);
        3: return palette_2cc(COLOUR_DARK_BLUE, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_light_blue_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_DARK_BLUE);
        1..2: return palette_2cc(company_colour1, COLOUR_LIGHT_BLUE);
        3: return palette_2cc(company_colour1, COLOUR_BLUE);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_green_1cc_result, ${random_bits}) {
        0: return palette_2cc(COLOUR_GREEN, company_colour2);
        1: return palette_2cc(COLOUR_DARK_GREEN, company_colour2);
        2..3: return palette_2cc(COLOUR_PALE_GREEN, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_green_2cc_result, ${random_bits}) {
        0..1: return palette_2cc(company_colour1, COLOUR_PALE_GREEN);
        2: return palette_2cc(company_colour1, COLOUR_GREEN);
        3: return palette_2cc(company_colour1, COLOUR_DARK_GREEN);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_dark_green_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_DARK_GREEN, company_colour2);
        2: return palette_2cc(COLOUR_GREEN, company_colour2);
        3: return palette_2cc(COLOUR_PALE_GREEN, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_dark_green_2cc_result, ${random_bits}) {
        0..1: return palette_2cc(company_colour1, COLOUR_PALE_GREEN);
        2: return palette_2cc(company_colour1, COLOUR_GREEN);
        3: return palette_2cc(company_colour1, COLOUR_DARK_GREEN);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_red_1cc_result, ${random_bits}) {
        0: return palette_2cc(COLOUR_RED, company_colour2);
        1: return palette_2cc(COLOUR_CREAM, company_colour2);
        2..3: return palette_2cc(COLOUR_PINK, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_red_2cc_result, ${random_bits}) {
        0..1: return palette_2cc(company_colour1, COLOUR_PINK);
        2: return palette_2cc(company_colour1, COLOUR_RED);
        3: return palette_2cc(company_colour1, COLOUR_CREAM);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_yellow_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_YELLOW, company_colour2);
        2: return palette_2cc(COLOUR_CREAM, company_colour2);
        3: return palette_2cc(COLOUR_ORANGE, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_yellow_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_CREAM);
        1: return palette_2cc(company_colour1, COLOUR_ORANGE);
        2..3: return palette_2cc(company_colour1, COLOUR_YELLOW);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_grey_brown_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_BROWN, company_colour2);
        2: return palette_2cc(COLOUR_GREY, company_colour2);
        3: return palette_2cc(COLOUR_CREAM, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_grey_brown_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_GREY);
        1: return palette_2cc(company_colour1, COLOUR_CREAM);
        2..3: return palette_2cc(company_colour1, COLOUR_BROWN);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_mauve_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_MAUVE, company_colour2);
        2: return palette_2cc(COLOUR_PURPLE, company_colour2);
        3: return palette_2cc(COLOUR_GREY, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_mauve_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_PURPLE);
        1: return palette_2cc(company_colour1, COLOUR_GREY);
        2..3: return palette_2cc(company_colour1, COLOUR_MAUVE);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_pink_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_PINK, company_colour2);
        2: return palette_2cc(COLOUR_CREAM, company_colour2);
        3: return palette_2cc(COLOUR_RED, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_pink_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_RED);
        1..2: return palette_2cc(company_colour1, COLOUR_PINK);
        3: return palette_2cc(company_colour1, COLOUR_CREAM);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_white_grey_1cc_result, ${random_bits}) {
        0..1: return palette_2cc(COLOUR_WHITE, company_colour2);
        2: return palette_2cc(COLOUR_GREY, company_colour2);
        3: return palette_2cc(COLOUR_BROWN, company_colour2);
    }
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_random_white_grey_2cc_result, ${random_bits}) {
        0: return palette_2cc(company_colour1, COLOUR_GREY);
        1: return palette_2cc(company_colour1, COLOUR_BROWN);
        2..3: return palette_2cc(company_colour1, COLOUR_WHITE);
    }
</tal:fixed_colour_scheme_results>

<tal:use_player_cc_with_randomised_shades repeat="cc ['1cc', '2cc']">
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_use_player_cc_with_randomised_shades_${cc}, company_colour${cc[0]}) {
        COLOUR_DARK_BLUE: switch_colour_scheme_random_dark_blue_${cc}_result;
        COLOUR_PALE_GREEN: switch_colour_scheme_random_green_${cc}_result;
        COLOUR_PINK: switch_colour_scheme_random_pink_${cc}_result;
        COLOUR_YELLOW: switch_colour_scheme_random_yellow_${cc}_result;
        COLOUR_RED: switch_colour_scheme_random_red_${cc}_result;
        COLOUR_LIGHT_BLUE: switch_colour_scheme_random_blue_${cc}_result;
        COLOUR_GREEN: switch_colour_scheme_random_green_${cc}_result;
        COLOUR_DARK_GREEN: switch_colour_scheme_random_green_${cc}_result;
        COLOUR_BLUE: switch_colour_scheme_random_blue_${cc}_result;
        COLOUR_CREAM: switch_colour_scheme_random_yellow_${cc}_result;
        COLOUR_MAUVE: switch_colour_scheme_random_mauve_${cc}_result;
        COLOUR_PURPLE: switch_colour_scheme_random_mauve_${cc}_result;
        COLOUR_ORANGE: switch_colour_scheme_random_yellow_${cc}_result;
        COLOUR_BROWN: switch_colour_scheme_random_grey_brown_${cc}_result;
        COLOUR_GREY: switch_colour_scheme_random_grey_brown_${cc}_result;
        COLOUR_WHITE: switch_colour_scheme_random_white_grey_${cc}_result;
    }
</tal:use_player_cc_with_randomised_shades>

<tal:contrast_with_player_cc repeat="cc ['1cc', '2cc']">
    <!--! these are not strict colour wheel contrasts, I just picked what looks right -->
    switch (FEAT_TRAINS, SELF, switch_colour_scheme_contrast_with_player_cc_${cc}, company_colour${cc[0]}) {
        COLOUR_DARK_BLUE: switch_colour_scheme_random_pink_${cc}_result;
        COLOUR_PALE_GREEN: switch_colour_scheme_random_grey_brown_${cc}_result;
        COLOUR_PINK: switch_colour_scheme_random_light_blue_${cc}_result;
        COLOUR_YELLOW: switch_colour_scheme_random_blue_${cc}_result;
        COLOUR_RED: switch_colour_scheme_random_blue_${cc}_result;
        COLOUR_LIGHT_BLUE: switch_colour_scheme_random_pink_${cc}_result;
        COLOUR_GREEN: switch_colour_scheme_random_yellow_${cc}_result;
        COLOUR_DARK_GREEN: switch_colour_scheme_random_light_blue_${cc}_result;
        COLOUR_BLUE: switch_colour_scheme_random_red_${cc}_result;
        COLOUR_CREAM: switch_colour_scheme_random_light_blue_${cc}_result;
        COLOUR_MAUVE: switch_colour_scheme_random_yellow_${cc}_result;
        COLOUR_PURPLE: switch_colour_scheme_random_yellow_${cc}_result;
        COLOUR_ORANGE: switch_colour_scheme_random_dark_green_${cc}_result;
        COLOUR_BROWN: switch_colour_scheme_random_dark_blue_${cc}_result;
        COLOUR_GREY: switch_colour_scheme_random_red_${cc}_result;
        COLOUR_WHITE: switch_colour_scheme_random_dark_blue_${cc}_result;
    }
</tal:contrast_with_player_cc>

<tal:legacy_code replace="nothing">
    0: return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
    1: return base_sprite_2cc + 16 * company_colour1 + company_colour2; <!--! swap 1CC and 2CC -->
</tal:legacy_code>

<!--! take colour from parameter, either the 1cc or 2cc result will be used, depending on vehicle, switching both is not supported -->
<tal:randomisation_strategy_from_param repeat="cc ['1cc', '2cc']">
    switch (FEAT_TRAINS, SELF, switch_randomisation_strategy_${cc}, param_wagon_colour_randomisation_strategy) {
        0: switch_colour_scheme_random_blue_${cc}_result;
        1: switch_colour_scheme_random_green_${cc}_result;
        2: switch_colour_scheme_random_red_${cc}_result;
        3: switch_colour_scheme_random_yellow_${cc}_result;
        4: switch_colour_scheme_random_grey_brown_${cc}_result;
        5: return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC, no random -->
        6: switch_colour_scheme_use_player_cc_with_randomised_shades_${cc};
        7: switch_colour_scheme_contrast_with_player_cc_${cc};
    }
</tal:randomisation_strategy_from_param>

<!--! is it 1cc or 2cc we're randomising (we don't support both because it's combinatorial silliness -->
<!--!switch (FEAT_TRAINS, SELF, switch_colour_mapping_1cc_or_2cc, LOAD_TEMP(0)) {
    1: return switch_randomise_1cc;
    2: return switch_randomise_2cc;
}-->

switch (FEAT_TRAINS, SELF, switch_cc_num_to_randomise, LOAD_TEMP(0)) {
    //1: switch_randomisation_strategy_1cc;
    //2: switch_randomisation_strategy_2cc;
    1: return custom_wagon_recolour_sprites + 16 * 0 /* recolour set */ + company_colour1;
    2: return custom_wagon_recolour_sprites + 16 * 1 /* recolour set */ + company_colour2;
}

<!--! handle user flipped state -->
switch (FEAT_TRAINS, SELF, switch_colour_mapping, cc_num_to_randomise, [STORE_TEMP(cc_num_to_randomise, 0), vehicle_is_flipped]) {
    1: return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
    return switch_cc_num_to_randomise;
}

switch (FEAT_TRAINS, SELF, switch_colour_mapping_purchase, cc_num_to_randomise, STORE_TEMP(cc_num_to_randomise, 0)) {
    return switch_cc_num_to_randomise;
}

