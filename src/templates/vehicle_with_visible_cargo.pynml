<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<!--! 'reversed' is random reversal on construction, depending on vehicle random bits
      'flipped' is user flipping vehicle in depot
      don't conflate them :) -->
// default graphics chain
<tal:reversible_variants repeat="reversed_variant consist.reversed_variants">
    <tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
        spriteset(${vehicle.id}_ss_empty_${reversed_variant}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_${reversed_variant}_${vehicle.id}_${flipped}(10)
        }

        spritegroup ${vehicle.id}_sg_empty_${reversed_variant}_${flipped} {
            loaded:  [
                ${vehicle.id}_ss_empty_${reversed_variant}_${flipped},
            ];
            loading: [
                ${vehicle.id}_ss_empty_${reversed_variant}_${flipped},
            ];
        }
    </tal:user_flipped>

    <tal:cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
        <tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
            spriteset(${vehicle.id}_ss_loading_${reversed_variant}_${cargo_variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
              spriteset_template_${vehicle.symmetry_type}_${reversed_variant}_${vehicle.id}_${flipped}(${cargo_variant_num * 60} + 40)
            }
            spriteset(${vehicle.id}_ss_loaded_${reversed_variant}_${cargo_variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
              spriteset_template_${vehicle.symmetry_type}_${reversed_variant}_${vehicle.id}_${flipped}(${cargo_variant_num * 60} + 70)
            }

            spritegroup ${vehicle.id}_sg_loading_${reversed_variant}_${cargo_variant_num}_${flipped} {
                loaded:  [
                    ${vehicle.id}_ss_loading_${reversed_variant}_${cargo_variant_num}_${flipped},
                ];
                loading: [
                    ${vehicle.id}_ss_loading_${reversed_variant}_${cargo_variant_num}_${flipped},
                ];
            }
            spritegroup ${vehicle.id}_sg_loaded_${reversed_variant}_${cargo_variant_num}_${flipped} {
                loaded:  [
                    ${vehicle.id}_ss_loaded_${reversed_variant}_${cargo_variant_num}_${flipped},
                ];
                loading: [
                    ${vehicle.id}_ss_loaded_${reversed_variant}_${cargo_variant_num}_${flipped},
                ];
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_percent_loaded_${reversed_variant}_${cargo_variant_num}_${flipped}, cargo_count*100/cargo_capacity) {
                    0: return ${vehicle.id}_sg_empty_${reversed_variant}_${flipped};
                    1..99: return ${vehicle.id}_sg_loading_${reversed_variant}_${cargo_variant_num}_${flipped};
                return ${vehicle.id}_sg_loaded_${reversed_variant}_${cargo_variant_num}_${flipped};
            }
        </tal:user_flipped>
        // handle user flipped state
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_flipped_${reversed_variant}_${cargo_variant_num}, vehicle_is_flipped) {
            1: return ${vehicle.id}_switch_graphics_percent_loaded_${reversed_variant}_${cargo_variant_num}_flipped;
            return ${vehicle.id}_switch_graphics_percent_loaded_${reversed_variant}_${cargo_variant_num}_unflipped;
        }
    </tal:cargo_variants>

    <tal:cargo_random_switches repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">

        <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
            random_switch (FEAT_TRAINS, ${vehicle.get_nml_expression_for_cargo_variant_random_switch(reversed_variant, mapping[0])}) {
                <tal:random_graphics_variations repeat="spriterow_num mapping[1]">
                    1: return ${vehicle.id}_switch_graphics_flipped_${reversed_variant}_${spriterow_num};
                </tal:random_graphics_variations>
            }
        </tal:exclude_default_cargo>
    </tal:cargo_random_switches>

    random_switch (FEAT_TRAINS, ${vehicle.get_nml_expression_for_cargo_variant_random_switch(reversed_variant, 'generic_cargos')}) {
        <tal:random_graphics_variations repeat="spriterow_num consist.gestalt_graphics.generic_rows">
            1: return ${vehicle.id}_switch_graphics_flipped_${reversed_variant}_${spriterow_num};
        </tal:random_graphics_variations>
    }

    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${reversed_variant}, cargo_type_in_veh) {
        <tal:cargos repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
            <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
                ${mapping[0]}: return ${vehicle.id}_switch_graphics_${reversed_variant}_${mapping[0]};
            </tal:exclude_default_cargo>
        </tal:cargos>
        return ${vehicle.id}_switch_graphics_${reversed_variant}_generic_cargos;
    }
</tal:reversible_variants>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}

spritegroup ${vehicle.id}_sg_purchase {
    loaded:  [
        ${vehicle.id}_ss_purchase,
    ];
    loading: [
        ${vehicle.id}_ss_purchase,
    ];
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_sg_purchase;
}

<tal:include metal:use-macro="load: capacity_switches.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />
