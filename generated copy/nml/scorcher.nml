            spriteset(scorcher_ss_unreversed_unflipped_0, "generated/graphics/scorcher.png") {
                spriteset_template_asymmetric_unreversed_8_8_unflipped(10,NOANIM)
            }
        switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_livery_unreversed_unflipped, company_colour1) {
            return scorcher_ss_unreversed_unflipped_0;
        }
        switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_vehicle_layers_unreversed_unflipped, getbits(extra_callback_info1, 8, 8)) {
            return scorcher_switch_graphics_livery_unreversed_unflipped;
        }
            spriteset(scorcher_ss_unreversed_flipped_0, "generated/graphics/scorcher.png") {
                spriteset_template_asymmetric_unreversed_8_8_flipped(10,NOANIM)
            }
        switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_livery_unreversed_flipped, company_colour1) {
            return scorcher_ss_unreversed_flipped_0;
        }
        switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_vehicle_layers_unreversed_flipped, getbits(extra_callback_info1, 8, 8)) {
            return scorcher_switch_graphics_livery_unreversed_flipped;
        }
    switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_unreversed, vehicle_is_flipped) {
        1: return scorcher_switch_graphics_vehicle_layers_unreversed_flipped;
        return scorcher_switch_graphics_vehicle_layers_unreversed_unflipped;
    }
random_switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_vehicle) {
        1: return scorcher_switch_graphics_unreversed;
}
// buy menu graphics chain
spriteset(scorcher_ss_vehicle_purchase_0, "generated/graphics/scorcher.png") {
    spriteset_template_purchase_dual_headed(224,10,33,-16,NOANIM)
}
switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_purchase_livery, company_colour1) {
    return scorcher_ss_vehicle_purchase_0;
}
        switch (FEAT_TRAINS, SELF, scorcher_switch_graphics_purchase, 0) {
            return scorcher_switch_graphics_purchase_livery;
        }
switch (FEAT_TRAINS, SELF, scorcher_switch_set_layers_register_more_sprites, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
    return scorcher_switch_graphics_vehicle;
}
switch (FEAT_TRAINS, SELF, scorcher_switch_graphics, getbits(extra_callback_info1, 8, 8)) {
    0: return scorcher_switch_set_layers_register_more_sprites;
    return switch_graphics_layer_tail_light_hst_32px_1;
}
switch (FEAT_TRAINS, SELF, scorcher_switch_colour_mapping, company_colour1) {
    return base_sprite_2cc + 16 * company_colour2 + company_colour1; 
}
        switch (FEAT_TRAINS, SELF, scorcher_switch_effect_spawn_model_and_powered, 1) {
            return EFFECT_SPAWN_MODEL_DIESEL;
        }
            switch (FEAT_TRAINS, SELF, scorcher_switch_create_effect_default_unreversed, [STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL,0,1,12), 0x100),STORE_TEMP(create_effect(EFFECT_SPRITE_DIESEL,0,-1,12), 0x101)]) {
                return 2 + CB_RESULT_CREATE_EFFECT_CENTER;
            }
    switch (FEAT_TRAINS, SELF, scorcher_switch_create_effect_check_railtype_unreversed, tile_powers_railtype("ELRL")) {
        return scorcher_switch_create_effect_default_unreversed;
    }
    switch (FEAT_TRAINS, SELF, scorcher_switch_buy_menu_text_result, 1) {
    return string(STR_BUY_MENU_WRAPPER_ONE_SUBSTR, string(STR_ROLE, string(STR_ROLE_HST)));
}
        switch (FEAT_TRAINS, SELF, scorcher_switch_buy_menu_text, 1) {
            return scorcher_switch_buy_menu_text_result;
        }
        switch (FEAT_TRAINS, PARENT, scorcher_switch_running_cost_factor, 1) {
            return 5833;
        }
item(FEAT_TRAINS, scorcher, 3320) {
    property {
        name:                           string(STR_NAME_CONSIST_PARENTHESES, string(STR_NAME_scorcher), string(STR_NAME_SUFFIX_DIESEL));
        climates_available:             NO_CLIMATE; // nml constant
        engine_class:                   ENGINE_CLASS_DIESEL;
        introduction_date:              date(2010, 4, 1);
        cargo_capacity:                 0;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          5850hp;
            speed:                          140mph;
        weight:                         70ton;
        tractive_effort_coefficient:    0.3;
        cost_factor:                    0; // use the CB to set this, the prop is capped to max 255, cb is 32k
        running_cost_base:              RUNNING_COST_STEAM;
        running_cost_factor:            0; // use the CB to set this, the prop is capped to max 255, cb is 32k
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask(CC_PASSENGERS);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [];
            default_cargo_type:             PASS;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_SPRITE_STACK,TRAIN_FLAG_AUTOREFIT); // nml constants
            dual_headed:                    1;
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   -10;
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         8;
        track_type:                     RAIL;
        effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_NONE; // default to none to suppress effects, set in cb as needed
    }
    graphics {
        default:                        scorcher_switch_graphics;
        purchase:                       scorcher_switch_graphics_purchase;
        cost_factor:                    261; // CB used as it is capped to max 32k, prop is only 255
        running_cost_factor:            scorcher_switch_running_cost_factor; // CB should be used even for static running costs as it is capped to max 32k, prop is only 255
        purchase_running_cost_factor:   5833; // purchase set separately to prevent unreliable results from trying to access non-available vars for variable run costs
                colour_mapping:                 scorcher_switch_colour_mapping;
            effect_spawn_model_and_powered: scorcher_switch_effect_spawn_model_and_powered;
            create_effect:      scorcher_switch_create_effect_check_railtype_unreversed;
            additional_text:                scorcher_switch_buy_menu_text;
    }
}
    if (param[1]==0) {
        item(FEAT_TRAINS, scorcher, 3320) {
            property {
                climates_available:             ALL_CLIMATES;
            }
        }
    }