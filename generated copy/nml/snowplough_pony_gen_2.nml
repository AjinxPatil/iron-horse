// default graphics chain
spriteset(snowplough_pony_gen_2_ss_unflipped_unreversed, "generated/graphics/snowplough_pony_gen_2.png") {
    spriteset_template_asymmetric_unreversed_4_8_unflipped(10,NOANIM)
}
spriteset(snowplough_pony_gen_2_ss_flipped_unreversed, "generated/graphics/snowplough_pony_gen_2.png") {
    spriteset_template_asymmetric_unreversed_4_8_flipped(10,NOANIM)
}
spriteset(snowplough_pony_gen_2_ss_unflipped_reversed, "generated/graphics/snowplough_pony_gen_2.png") {
    spriteset_template_asymmetric_reversed_4_8_unflipped(10,NOANIM)
}
spriteset(snowplough_pony_gen_2_ss_flipped_reversed, "generated/graphics/snowplough_pony_gen_2.png") {
    spriteset_template_asymmetric_reversed_4_8_flipped(10,NOANIM)
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_graphics_vehicle_last, vehicle_is_flipped) {
    1: return snowplough_pony_gen_2_ss_flipped_reversed;
    return snowplough_pony_gen_2_ss_unflipped_reversed;
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_graphics_vehicle_default, vehicle_is_flipped) {
    1: return snowplough_pony_gen_2_ss_flipped_unreversed;
    return snowplough_pony_gen_2_ss_unflipped_unreversed;
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_graphics_check_last, position_in_consist_from_end) {
    0: snowplough_pony_gen_2_switch_graphics_vehicle_last;
    return snowplough_pony_gen_2_switch_graphics_vehicle_default;
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_graphics_vehicle, num_vehs_in_consist) {
    1: snowplough_pony_gen_2_switch_graphics_vehicle_default;
    return snowplough_pony_gen_2_switch_graphics_check_last;
}
// buy menu graphics chain
spriteset(snowplough_pony_gen_2_ss_purchase, "generated/graphics/snowplough_pony_gen_2.png") {
    spriteset_template_purchase_default(224,10,17,-8,NOANIM)
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_graphics_purchase, 0) {
    return snowplough_pony_gen_2_ss_purchase;
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_set_layers_register_more_sprites, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
    return snowplough_pony_gen_2_switch_graphics_vehicle;
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_graphics, getbits(extra_callback_info1, 8, 8)) {
    0: return snowplough_pony_gen_2_switch_set_layers_register_more_sprites;
    return switch_graphics_layer_tail_light_empty;
}
switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_cargo_capacity,
        [STORE_TEMP(6, 0), STORE_TEMP(8, 1), STORE_TEMP(11, 2), STORE_TEMP(15, 3)]) {
    return switch_cargo_capacity();
}
    switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_buy_menu_text_result, 1) {
    return string(STR_BUY_MENU_WRAPPER_TWO_SUBSTR, string(STR_ROLE, string(STR_ROLE_LOLZ)), string(STR_BUY_MENU_HINT_DRIVING_CAB));
}
        switch (FEAT_TRAINS, SELF, snowplough_pony_gen_2_switch_buy_menu_text, 1) {
            return snowplough_pony_gen_2_switch_buy_menu_text_result;
        }
        switch (FEAT_TRAINS, PARENT, snowplough_pony_gen_2_switch_running_cost_factor, 1) {
            return 518;
        }
item(FEAT_TRAINS, snowplough_pony_gen_2, 4000) {
    property {
        name:                           string(STR_NAME_snowplough_pony_gen_2);
        climates_available:             NO_CLIMATE; // nml constant
        engine_class:                   ENGINE_CLASS_DIESEL;
        introduction_date:              date(1900, 12, 1);
        cargo_capacity:                 8;
        sprite_id:                      SPRITE_ID_NEW_TRAIN; //enable new graphics - nml constant
        power:                          100hp;
            speed:                          75mph;
        weight:                         50ton;
        tractive_effort_coefficient:    0.1;
        cost_factor:                    0; // use the CB to set this, the prop is capped to max 255, cb is 32k
        running_cost_base:              RUNNING_COST_STEAM;
        running_cost_factor:            0; // use the CB to set this, the prop is capped to max 255, cb is 32k
        refit_cost:                     0; // btw this needs to be 0 if we want autorefit without using cb
        refittable_cargo_classes:       bitmask(CC_ARMOURED,CC_MAIL,CC_EXPRESS);
        non_refittable_cargo_classes:   bitmask(); // don't set non-refittable classes, increases likelihood of breaking cargo support
        cargo_allow_refit:              [];
        cargo_disallow_refit:           [TOUR];
            default_cargo_type:             MAIL;
        misc_flags:                     bitmask(TRAIN_FLAG_2CC,TRAIN_FLAG_SPRITE_STACK,TRAIN_FLAG_FLIP,TRAIN_FLAG_AUTOREFIT); // nml constants
        model_life:                     VEHICLE_NEVER_EXPIRES;
        retire_early:                   -10;
        reliability_decay:              20; // default value
        vehicle_life:                   40;
        length:                         4;
        track_type:                     RAIL;
        effect_spawn_model_and_powered: EFFECT_SPAWN_MODEL_NONE; // default to none to suppress effects, set in cb as needed
    }
    graphics {
        default:                        snowplough_pony_gen_2_switch_graphics;
        purchase:                       snowplough_pony_gen_2_switch_graphics_purchase;
        cost_factor:                    4; // CB used as it is capped to max 32k, prop is only 255
        running_cost_factor:            snowplough_pony_gen_2_switch_running_cost_factor; // CB should be used even for static running costs as it is capped to max 32k, prop is only 255
        purchase_running_cost_factor:   518; // purchase set separately to prevent unreliable results from trying to access non-available vars for variable run costs
            cargo_capacity:                 snowplough_pony_gen_2_switch_cargo_capacity;
            purchase_cargo_capacity:        snowplough_pony_gen_2_switch_cargo_capacity;
            loading_speed:                  5;
            additional_text:                snowplough_pony_gen_2_switch_buy_menu_text;
    }
}
    if (param[1]==0 && param_simplified_gameplay==0) {
        item(FEAT_TRAINS, snowplough_pony_gen_2, 4000) {
            property {
                climates_available:             ALL_CLIMATES;
            }
        }
    }